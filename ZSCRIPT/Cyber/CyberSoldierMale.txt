//==============================================================================
//
// Cyber Male.
//
//==============================================================================

// -----------------------------------------------------------------------------
// AI nodes.
// -----------------------------------------------------------------------------

// Node CombatSTD: check if fit for a missile attack.
class CyberSoldierMale_AINode_CombatSTD : TUtilityBehavior
{
	static CyberSoldierMale_AINode_CombatSTD Create()
	{
		CyberSoldierMale_AINode_CombatSTD Result = New('CyberSoldierMale_AINode_CombatSTD');
		return Result;
	}
	override double CalculateUtility(TCustomCyberActor CustomCyberActor)
	{
		return 0.5;
	}
	override TStatus Update(TCustomCyberActor CustomCyberActor)
	{
		if (CustomCyberActor.IsInAttackState())
		{
			if (CustomCyberActor.WeaponCooldown == 0)
			{
				CustomCyberActor.B_Missile('SM_Bullet');
				CustomCyberActor.WeaponCooldown = 4;
			}
			return BH_RUNNING;
		}
		if (CustomCyberActor.CheckMissileRange())
		{
			CustomCyberActor.UpdateStateLabel("Missile", true);
			CustomCyberActor.WeaponCooldown = 2;
		}
		return BH_SUCCESS;
	}
}

// Node CombatPLC: check if fit for a missile attack.
class CyberSoldierMale_AINode_CombatPLC : TUtilityBehavior
{
	double MaxDistance; // Actually is squared for performance reasons.
	static CyberSoldierMale_AINode_CombatPLC Create(double MaxDistance = 1024)
	{
		CyberSoldierMale_AINode_CombatPLC Result = New('CyberSoldierMale_AINode_CombatPLC');
		Result.MaxDistance = MaxDistance ** 2;
		return Result;
	}
	override double CalculateUtility(TCustomCyberActor CustomCyberActor)
	{
		if (CustomCyberActor.Distance2DSquared(CustomCyberActor.Target) <= MaxDistance)
			return 0.7;
		return 0;
	}
	override TStatus Update(TCustomCyberActor CustomCyberActor)
	{
		if (CustomCyberActor.IsInAttackState())
		{
			if (CustomCyberActor.WeaponCooldown == 0)
			{
				CustomCyberActor.A_StartSound("weapons/plc", CHAN_WEAPON);
				CustomCyberActor.B_Missile('PlasmaLaserCannonProjectile');
				CustomCyberActor.WeaponCooldown = 4;
			}
			return BH_RUNNING;
		}
		if (CustomCyberActor.CheckMissileRange())
		{
			CustomCyberActor.UpdateStateLabel("Missile", true);
			CustomCyberActor.WeaponCooldown = 2;
		}
		return BH_SUCCESS;
	}
}

// -----------------------------------------------------------------------------
// CyberSoldierMale.
// -----------------------------------------------------------------------------

class CyberSoldierMale : TCyberBasic abstract
{
	override void Initialize()
	{
		super.Initialize();
		A_GiveInventory('EnergyShield1', 1);
	}
	default
	{
		CameraHeight 42;
		Health 100;
		Height 56;
		Mass 100;
		PainChance 30;
		Radius 20;
		Speed 12;
		Tag "Cyber Soldier Male";
		KAI_Actor.AggressionMultiplier 1.0;
		KAI_Actor.ThreatLevel THREAT_DANGEROUS;
		KAI_Actor.ThreatLevelThreshold THREAT_VERYDANGEROUS;
		ActiveSound "CyberMale/Active";
		AttackSound "CyberMale/Attack";
		DeathSound "CyberMale/Death";
		PainSound "CyberMale/Pain";
		SeeSound "CyberMale/Sight";
	}
	states
	{
		Spawn:
			TNT1 A 0;
			goto Think;
		See:
			TNT1 A 0;
			goto Think;
		Pain:
			TNT1 A 0 A_Pain();
			goto Think;
		Death:
			PLAZ H 10 B_Die();
			PLAZ IJKLM 10;
			PLAZ N -1;
			stop;
		XDeath:
			PLAZ O 5 B_Die();
			PLAZ PQRSTUV 5;
			PLAZ W -1;
			stop;
		Raise:
			PLAZ N 10 Initialize();
			PLAZ MKJIH 10;
			goto Think;
		Think:
			TNT1 A 0 B_Think();
			loop; // Never, it is safe!
		Idle:
			PLAZ AB 10;
			goto Think;
		Jump:
			PLAZ A 5 B_JumpBegin();
			PLAZ B 5;
			PLAZ C 5;
			PLAZ D 5 B_JumpEnd();
			goto Think;
		Run:
			PLAZ ABCD 2;
			goto Think;
		Walk:
			PLAZ ABCD 4;
			goto Think;
	}
}

class CyberSoldierMaleGreen : CyberSoldierMale
{
	override void InitBehavior()
	{
		MeleeState = null;
		MissileState = FindState("Missile", true);
		AttackStates.Push(MissileState);
		TBehaviorTreeManager BehaviorTreeManager = TBehaviorTreeManager.GetInstance();
		Behavior = BehaviorTreeManager.GetBehavior(self.GetClass());
		if (!Behavior)
		{
			Behavior = TSequence.Create()
				.AddBehavior(TCyberBasic_AINode_TimeFreeze.Create())
				.AddBehavior(TCyberBasic_AINode_BasicLife.Create())
				.AddBehavior(
					TSelector.Create() // Strategy selector
						.AddBehavior(TCyberBasic_AINode_SearchHelp.Create())
						.AddBehavior(TCyberBasic_AINode_Goal.Create(6))
						.AddBehavior(TCyberBasic_AINode_Fight.Create())
						.AddBehavior(TCyberBasic_AINode_Gesture.Create())
						.AddBehavior(TCyberBasic_AINode_Rest.Create())
				)
				.AddBehavior(
					TSequence.Create()
					.AddBehavior(TCyberBasic_AINode_ChaseMode.Create(6, 12))
					.AddBehavior(
						TSelector.Create() // Tactical selector
							.AddBehavior(TCyberBasic_AINode_Jump.Create())
							.AddBehavior(TCyberBasic_AINode_CoverZone.Create())
							.AddBehavior(TCyberBasic_AINode_NextMove.Create())
					)
					.AddBehavior(TCyberBasic_AINode_Move.Create())
					.AddBehavior(TCyberBasic_AINode_CloackingDevice.Create())
				)
				.AddBehavior(
					TSequence.Create()
					.AddBehavior(TCyberBasic_AINode_BasicCombat.Create())
					.AddBehavior(TCyberBasic_AINode_CombatMissile.Create())
				)
			;
			BehaviorTreeManager.AddBehavior(self.GetClass(), Behavior);
		}
	}
	default
	{
		DropItem "Cell", 192;
		DropItem "CellPack", 32;
		DropItem "PlasmaGun", 32;
		DropItem "CyberArmor", 11;
		Tag "Cyber Soldier Male Green";
		Translation "CyberGreen";
	}
	states
	{
		Missile:
			PLAZ E 0 A_Jump(32, "Think");
			PLAZ E 7 A_FaceTarget();
			PLAZ F 1 bright B_Missile('ArachnotronPlasma');
			PLAZ F 0 bright A_MonsterRefire(0, "Think");
			goto Missile;
	}
}

class CyberSoldierMaleRed : CyberSoldierMale
{
	override void InitBehavior()
	{
		MeleeState = null;
		MissileState = FindState("Missile", true);
		AttackStates.Push(MissileState);
		TBehaviorTreeManager BehaviorTreeManager = TBehaviorTreeManager.GetInstance();
		Behavior = BehaviorTreeManager.GetBehavior(self.GetClass());
		if (!Behavior)
		{
			Behavior = TSequence.Create()
				.AddBehavior(TCyberBasic_AINode_TimeFreeze.Create())
				.AddBehavior(TCyberBasic_AINode_BasicLife.Create())
				.AddBehavior(
					TSelector.Create() // Strategy selector
						.AddBehavior(TCyberBasic_AINode_SearchHelp.Create())
						.AddBehavior(TCyberBasic_AINode_Goal.Create(6))
						.AddBehavior(TCyberBasic_AINode_Fight.Create())
						.AddBehavior(TCyberBasic_AINode_Gesture.Create())
						.AddBehavior(TCyberBasic_AINode_Rest.Create())
				)
				.AddBehavior(
					TSequence.Create()
					.AddBehavior(TCyberBasic_AINode_ChaseMode.Create(6, 12))
					.AddBehavior(
						TSelector.Create() // Tactical selector
							.AddBehavior(TCyberBasic_AINode_Jump.Create())
							.AddBehavior(TCyberBasic_AINode_CoverZone.Create())
							.AddBehavior(TCyberBasic_AINode_NextMove.Create())
					)
					.AddBehavior(TCyberBasic_AINode_Move.Create())
					.AddBehavior(TCyberBasic_AINode_CloackingDevice.Create())
				)
				.AddBehavior(
					TSequence.Create()
					.AddBehavior(TCyberBasic_AINode_BasicCombat.Create())
					.AddBehavior(TCyberBasic_AINode_CombatMissile.Create())
				)
			;
			BehaviorTreeManager.AddBehavior(self.GetClass(), Behavior);
		}
	}
	default
	{
		DropItem "Cell", 192;
		DropItem "CellPack", 32;
		DropItem "PlasmaRifle", 32;
		DropItem "CyberArmor", 11;
		Tag "Cyber Soldier Male Red";
		Translation "CyberRed";
	}
	states
	{
		Missile:
			PLAZ E 0 A_Jump(32, "Think");
			PLAZ E 2 A_FaceTarget();
			PLAZ F 1 bright B_Missile('PlasmaBall');
			PLAZ F 0 bright A_MonsterRefire(0, "Think");
			goto Missile;
	}
}

class CyberSoldierMaleBlue : CyberSoldierMale
{
	override void InitBehavior()
	{
		MeleeState = null;
		MissileState = FindState("Missile", true);
		AttackStates.Push(MissileState);
		TBehaviorTreeManager BehaviorTreeManager = TBehaviorTreeManager.GetInstance();
		Behavior = BehaviorTreeManager.GetBehavior(self.GetClass());
		if (!Behavior)
		{
			Behavior = TSequence.Create()
				.AddBehavior(TCyberBasic_AINode_TimeFreeze.Create())
				.AddBehavior(TCyberBasic_AINode_BasicLife.Create())
				.AddBehavior(
					TSelector.Create() // Strategy selector
						.AddBehavior(TCyberBasic_AINode_SearchHelp.Create())
						.AddBehavior(TCyberBasic_AINode_Goal.Create(6))
						.AddBehavior(TCyberBasic_AINode_Fight.Create())
						.AddBehavior(TCyberBasic_AINode_Gesture.Create())
						.AddBehavior(TCyberBasic_AINode_Rest.Create())
				)
				.AddBehavior(
					TSequence.Create()
					.AddBehavior(TCyberBasic_AINode_ChaseMode.Create(6, 12))
					.AddBehavior(
						TSelector.Create() // Tactical selector
							.AddBehavior(TCyberBasic_AINode_Jump.Create())
							.AddBehavior(TCyberBasic_AINode_CoverZone.Create())
							.AddBehavior(TCyberBasic_AINode_NextMove.Create())
					)
					.AddBehavior(TCyberBasic_AINode_Move.Create())
					.AddBehavior(TCyberBasic_AINode_CloackingDevice.Create())
				)
				.AddBehavior(
					TSequence.Create()
					.AddBehavior(TCyberBasic_AINode_BasicCombat.Create())
					.AddBehavior(TCyberBasic_AINode_CombatMissile.Create())
				)
			;
			BehaviorTreeManager.AddBehavior(self.GetClass(), Behavior);
		}
	}
	default
	{
		DropItem "Cell", 192;
		DropItem "CellPack", 32;
		DropItem "NFG", 32;
		DropItem "CyberArmor", 11;
		Tag "Cyber Soldier Male Blue";
		Translation "CyberBlue";
	}
	states
	{
		Missile:
			PLAZ E 0 A_Jump(32, "Think");
			PLAZ E 2 A_FaceTarget();
			PLAZ F 1 bright B_Missile('NFGPlasmaBall');
			PLAZ F 0 bright A_MonsterRefire(0, "Think");
			goto Missile;
	}
}

class CyberSoldierMaleGray : CyberSoldierMale
{
	override void InitBehavior()
	{
		MeleeState = null;
		MissileState = FindState("Missile", true);
		AttackStates.Push(MissileState);
		TBehaviorTreeManager BehaviorTreeManager = TBehaviorTreeManager.GetInstance();
		Behavior = BehaviorTreeManager.GetBehavior(self.GetClass());
		if (!Behavior)
		{
			Behavior = TSequence.Create()
				.AddBehavior(TCyberBasic_AINode_TimeFreeze.Create())
				.AddBehavior(TCyberBasic_AINode_BasicLife.Create())
				.AddBehavior(
					TSelector.Create() // Strategy selector
						.AddBehavior(TCyberBasic_AINode_SearchHelp.Create())
						.AddBehavior(TCyberBasic_AINode_RepairVehicle.Create())
						.AddBehavior(TCyberBasic_AINode_Goal.Create(6))
						.AddBehavior(TCyberBasic_AINode_Fight.Create())
						.AddBehavior(TCyberBasic_AINode_Gesture.Create())
						.AddBehavior(TCyberBasic_AINode_Rest.Create())
				)
				.AddBehavior(
					TSequence.Create()
					.AddBehavior(TCyberBasic_AINode_ChaseMode.Create(6, 12))
					.AddBehavior(
						TSelector.Create() // Tactical selector
							.AddBehavior(TCyberBasic_AINode_Jump.Create())
							.AddBehavior(TCyberBasic_AINode_CoverZone.Create())
							.AddBehavior(TCyberBasic_AINode_NextMove.Create())
					)
					.AddBehavior(TCyberBasic_AINode_Move.Create())
					.AddBehavior(TCyberBasic_AINode_CloackingDevice.Create())
				)
				.AddBehavior(
					TSequence.Create()
					.AddBehavior(TCyberBasic_AINode_BasicCombat.Create())
					.AddBehavior(TCyberBasic_AINode_CombatMissile.Create())
				)
			;
			BehaviorTreeManager.AddBehavior(self.GetClass(), Behavior);
		}
	}
	default
	{
		DropItem "Clip", 192;
		DropItem "ClipBox", 32;
		DropItem "VanillaRifle", 32;
		DropItem "CyberArmor", 11;
		Tag "Cyber Soldier Male Gray";
		Translation "CyberGray";
	}
	states
	{
		Missile:
			PLAZ E 4 A_Jump(32, "Think");
			PLAZ F 4 bright B_Missile("SM_Bullet");
			PLAZ F 0 bright A_MonsterRefire(0, "Think");
			goto Missile;
	}
}

class CyberSoldierMaleWhite : CyberSoldierMale
{
	override void InitBehavior()
	{
		MeleeState = null;
		MissileState = FindState("Missile", true);
		AttackStates.Push(MissileState);
		TBehaviorTreeManager BehaviorTreeManager = TBehaviorTreeManager.GetInstance();
		Behavior = BehaviorTreeManager.GetBehavior(self.GetClass());
		if (!Behavior)
		{
			Behavior = TSequence.Create()
				.AddBehavior(TCyberBasic_AINode_TimeFreeze.Create())
				.AddBehavior(TCyberBasic_AINode_BasicLife.Create())
				.AddBehavior(
					TSelector.Create() // Strategy selector
						.AddBehavior(TCyberBasic_AINode_SearchHelp.Create())
						.AddBehavior(TCyberBasic_AINode_GiveAid.Create())
						.AddBehavior(TCyberBasic_AINode_Goal.Create(6))
						.AddBehavior(TCyberBasic_AINode_Fight.Create())
						.AddBehavior(TCyberBasic_AINode_Gesture.Create())
						.AddBehavior(TCyberBasic_AINode_Rest.Create())
				)
				.AddBehavior(
					TSequence.Create()
					.AddBehavior(TCyberBasic_AINode_ChaseMode.Create(6, 12))
					.AddBehavior(
						TSelector.Create() // Tactical selector
							.AddBehavior(TCyberBasic_AINode_Jump.Create())
							.AddBehavior(TCyberBasic_AINode_CoverZone.Create())
							.AddBehavior(TCyberBasic_AINode_NextMove.Create())
					)
					.AddBehavior(TCyberBasic_AINode_Move.Create())
					.AddBehavior(TCyberBasic_AINode_CloackingDevice.Create())
				)
				.AddBehavior(
					TSequence.Create()
					.AddBehavior(TCyberBasic_AINode_BasicCombat.Create())
					.AddBehavior(TCyberBasic_AINode_CombatMissile.Create())
				)
			;
			BehaviorTreeManager.AddBehavior(self.GetClass(), Behavior);
		}
	}
	default
	{
		DropItem "Clip", 192;
		DropItem "ClipBox", 32;
		DropItem "VanillaRifle", 32;
		DropItem "Berserk", 32;
		DropItem "CyberArmor", 11;
		Tag "Cyber Soldier Male White (Nurse)";
		Translation "CyberWhite";
		+TCustomNavMeshActor.NavMeshNurse;
	}
	states
	{
		Missile:
			PLAZ E 4 A_Jump(32, "Think");
			PLAZ F 4 bright B_Missile("SM_Bullet");
			PLAZ F 0 bright A_MonsterRefire(0, "Think");
			goto Missile;
	}
}

class CyberSoldierMaleBlack : CyberSoldierMale
{
	override void InitBehavior()
	{
		MeleeState = null;
		MissileState = FindState("Missile", true);
		AttackStates.Push(MissileState);
		TBehaviorTreeManager BehaviorTreeManager = TBehaviorTreeManager.GetInstance();
		Behavior = BehaviorTreeManager.GetBehavior(self.GetClass());
		if (!Behavior)
		{
			Behavior = TSequence.Create()
				.AddBehavior(TCyberBasic_AINode_TimeFreeze.Create())
				.AddBehavior(TCyberBasic_AINode_BasicLife.Create())
				.AddBehavior(
					TSelector.Create() // Strategy selector
						.AddBehavior(TCyberBasic_AINode_SearchHelp.Create())
						.AddBehavior(TCyberBasic_AINode_Goal.Create(6))
						.AddBehavior(TCyberBasic_AINode_Fight.Create())
						.AddBehavior(TCyberBasic_AINode_Gesture.Create())
						.AddBehavior(TCyberBasic_AINode_Rest.Create())
				)
				.AddBehavior(
					TSequence.Create()
					.AddBehavior(TCyberBasic_AINode_ChaseMode.Create(6, 12))
					.AddBehavior(
						TSelector.Create() // Tactical selector
							.AddBehavior(TCyberBasic_AINode_Jump.Create())
							.AddBehavior(TCyberBasic_AINode_CoverZone.Create())
							.AddBehavior(TCyberBasic_AINode_NextMove.Create())
					)
					.AddBehavior(TCyberBasic_AINode_Move.Create())
					.AddBehavior(TCyberBasic_AINode_CloackingDevice.Create())
				)
				.AddBehavior(
					TSequence.Create()
					.AddBehavior(TCyberBasic_AINode_BasicCombat.Create())
					.AddBehavior(
						TUtilitySelector.Create()
							.AddBehavior(CyberSoldierMale_AINode_CombatPLC.Create())
							.AddBehavior(CyberSoldierMale_AINode_CombatSTD.Create())
					)
				)
			;
			BehaviorTreeManager.AddBehavior(self.GetClass(), Behavior);
		}
	}
	default
	{
		DropItem "Clip", 192;
		DropItem "ClipBox", 32;
		DropItem "VanillaRifle", 32;
		DropItem "CyberBattery", 192;
		DropItem "CyberBatteryPack", 32;
		DropItem "PlasmaLaserCannon", 32;
		DropItem "CyberArmor", 11;
		Tag "Cyber Soldier Male Black";
		Translation "CyberBlack";
	}
	states
	{
		Missile:
			PLAZ E 2 A_Jump(16, "Think");
			PLAZ F 2 bright;
			PLAZ F 0 bright A_MonsterRefire(0, "Think");
			goto Missile;
	}
}
