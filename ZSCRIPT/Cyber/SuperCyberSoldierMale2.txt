//==============================================================================
//
// Super Cyber Soldier Male LVL 2.
//
//==============================================================================

// -----------------------------------------------------------------------------
// AI nodes.
// -----------------------------------------------------------------------------

// Node Gesture: perform gesture animation.
class SuperCyberSoldierMale2_AINode_Gesture : TCyberBasic_AINode_Gesture
{
	static SuperCyberSoldierMale2_AINode_Gesture Create()
	{
		SuperCyberSoldierMale2_AINode_Gesture Result = New('SuperCyberSoldierMale2_AINode_Gesture');
		return Result;
	}
	override TStatus Update(TCustomCyberActor CustomCyberActor)
	{
		if (CustomCyberActor.CurrentWeapon)
			return BH_FAILURE;
		if (CustomCyberActor.IsInGestureAnimation())
			return BH_RUNNING;
		if ((CustomCyberActor.TargetAcquired) && (CustomCyberActor.PriorityQueue.Items.Size() == 0))
		{
			switch (Random[SuperCyberSoldierMale2](1, 8))
			{
				case 1:
					CustomCyberActor.UpdateStateLabel("Idle", true);
					break;
				case 2:
					CustomCyberActor.UpdateStateLabel("Charge", true);
					break;
				case 3:
					CustomCyberActor.UpdateStateLabel("Taunt", true);
					break;
				case 4:
					CustomCyberActor.UpdateStateLabel("Idle", true);
					break;
				case 5:
					CustomCyberActor.UpdateStateLabel("Idle", true);
					break;
				case 6:
					CustomCyberActor.A_StartSound("SuperSoldierMale/Taunt");
					CustomCyberActor.UpdateStateLabel("Taunt", true);
					break;
				case 7:
					CustomCyberActor.A_StartSound("SuperSoldierMale/Taunt");
					CustomCyberActor.UpdateStateLabel("Charge", true);
					break;
				case 8:
					CustomCyberActor.UpdateStateLabel("Idle", true);
			}
			CustomCyberActor.TargetAcquired = false;
			return BH_SUCCESS;
		}
		return BH_FAILURE;
	}
}

// Node Rest: perform idle animation.
class SuperCyberSoldierMale2_AINode_Rest : TCyberBasic_AINode_Rest
{
	static SuperCyberSoldierMale2_AINode_Rest Create()
	{
		SuperCyberSoldierMale2_AINode_Rest Result = New('SuperCyberSoldierMale2_AINode_Rest');
		return Result;
	}
	override TStatus Update(TCustomCyberActor CustomCyberActor)
	{
		CustomCyberActor.Destination = CustomCyberActor.Pos;
		if (!CustomCyberActor.IsInGestureAnimation())
			if (CustomCyberActor.CurrentWeapon)
			{
				CustomCyberActor.UpdateStateLabel("Rifle.Idle");
			}
			else
			{
				CustomCyberActor.UpdateStateLabel("Idle");
			}
		return BH_SUCCESS;
	}
}

// Node ChaseMode: decide the chase mode.
class SuperCyberSoldierMale2_AINode_ChaseMode : TBehavior
{
	int RunFastSpeed;
	int RunSpeed;
	int WalkSpeed;
	static SuperCyberSoldierMale2_AINode_ChaseMode Create(int WalkSpeed = 10, int RunSpeed = 20, int RunFastSpeed = 24)
	{
		SuperCyberSoldierMale2_AINode_ChaseMode Result = New('SuperCyberSoldierMale2_AINode_ChaseMode');
		Result.WalkSpeed = WalkSpeed;
		Result.RunSpeed = RunSpeed;
		Result.RunFastSpeed = RunFastSpeed;
		return Result;
	}
	override TStatus Update(TCustomCyberActor CustomCyberActor)
	{
		if (CustomCyberActor.HelpGiver)
		{
			CustomCyberActor.CurStateLabel = "RunFast";
			CustomCyberActor.Speed = RunFastSpeed;
			return BH_SUCCESS;
		}
		if (CustomCyberActor.HelpReceiver)
		{
			if (CustomCyberActor.HelpReceiver is 'KAI_BaseVehicle')
			{
				CustomCyberActor.CurStateLabel = "Walk";
				CustomCyberActor.Speed = WalkSpeed;
				return BH_SUCCESS;
			}
			else
			{
				CustomCyberActor.CurStateLabel = "RunFast";
				CustomCyberActor.Speed = RunFastSpeed;
				return BH_SUCCESS;
			}
		}
		if (CustomCyberActor.PriorityQueue.Items.Size() > 0)
		{
			if (CustomCyberActor.CurrentWeapon)
			{
				CustomCyberActor.UpdateStateLabel("Rifle.Run");
				CustomCyberActor.Speed = RunSpeed;
				return BH_SUCCESS;
			}
			TPriorityQueueItem PriorityQueueItem = CustomCyberActor.PriorityQueue.Items[0];
			if
			(
				(CustomCyberActor.IsIndestructible(PriorityQueueItem.Monster))
				|| (CustomCyberActor.HasGodMode(PriorityQueueItem.Monster))
				|| (CustomCyberActor.HasBuddha(PriorityQueueItem.Monster))
				|| (CustomCyberActor.IsFrightening(PriorityQueueItem.Monster))
			)
			{
				CustomCyberActor.UpdateStateLabel("RunFast");
				CustomCyberActor.Speed = RunSpeed;
				return BH_SUCCESS;
			}
			if
			(
				(PriorityQueueItem.ExperiencedThreatLevel == ETL_CRITICAL)
				|| (PriorityQueueItem.ThreatLevel > CustomCyberActor.ThreatLevelThreshold)
			)
			{
				CustomCyberActor.UpdateStateLabel("RunFast");
				CustomCyberActor.Speed = RunSpeed;
				return BH_SUCCESS;
			}
			if
			(
				(PriorityQueueItem.ExperiencedThreatLevel == ETL_DANGER)
				|| (PriorityQueueItem.ThreatLevel == CustomCyberActor.ThreatLevelThreshold)
			)
			{
				CustomCyberActor.UpdateStateLabel("RunFast");
				CustomCyberActor.Speed = RunSpeed;
				return BH_SUCCESS;
			}
			if
			(
				(PriorityQueueItem.ExperiencedThreatLevel == ETL_NORMAL)
				|| (PriorityQueueItem.ThreatLevel >= THREAT_NORMAL)
			)
			{
				CustomCyberActor.UpdateStateLabel("Run");
				CustomCyberActor.Speed = RunSpeed;
				return BH_SUCCESS;
			}
			CustomCyberActor.UpdateStateLabel("Walk");
			CustomCyberActor.Speed = WalkSpeed;
			return BH_SUCCESS;
		}
		return BH_SUCCESS;
	}
}

// Node NextMove: perform tactical movement.
class SuperCyberSoldierMale2_AINode_NextMove : TCyberBasic_AINode_NextMove
{
	static SuperCyberSoldierMale2_AINode_NextMove Create()
	{
		SuperCyberSoldierMale2_AINode_NextMove Result = New('SuperCyberSoldierMale2_AINode_NextMove');
		return Result;
	}
	override double CalculateUtilityDistance(TCustomCyberActor CustomCyberActor, TPriorityQueueItem PriorityQueueItem)
	{
		if
		(
			(CustomCyberActor.IsIndestructible(PriorityQueueItem.Monster))
			|| (CustomCyberActor.HasGodMode(PriorityQueueItem.Monster))
			|| (CustomCyberActor.HasBuddha(PriorityQueueItem.Monster))
			|| (CustomCyberActor.IsFrightening(PriorityQueueItem.Monster))
		)
			return 1048576;	// As far as possible!
		if
		(
			(PriorityQueueItem.ExperiencedThreatLevel == ETL_CRITICAL)
			|| (PriorityQueueItem.ThreatLevel > CustomCyberActor.ThreatLevelThreshold)
		)
			return 1024;
		if
		(
			(PriorityQueueItem.ExperiencedThreatLevel == ETL_DANGER)
			|| (PriorityQueueItem.ThreatLevel == CustomCyberActor.ThreatLevelThreshold)
		)
			return 384;
		if
		(
			(PriorityQueueItem.ExperiencedThreatLevel == ETL_NORMAL)
			|| (PriorityQueueItem.ThreatLevel >= THREAT_ABOVENORMAL)
		)
			return 256;
		return 128;
	}
}

// Node Fireball: check if fit for a energy attack.
class SuperCyberSoldierMale2_AINode_Fireball : TUtilityBehavior
{
	static SuperCyberSoldierMale2_AINode_Fireball Create()
	{
		SuperCyberSoldierMale2_AINode_Fireball Result = New('SuperCyberSoldierMale2_AINode_Fireball');
		return Result;
	}
	override double CalculateUtility(TCustomCyberActor CustomCyberActor)
	{
		TPriorityQueueItem PriorityQueueItem = CustomCyberActor.PriorityQueue.Items[0];
		if ((PriorityQueueItem.Monster.Health >= 5000) && (CustomCyberActor.Distance2DSquared(CustomCyberActor.Target) > 2560))
			return 0.8;
		return 0;
	}
	override TStatus Update(TCustomCyberActor CustomCyberActor)
	{
		if (CustomCyberActor.IsInAttackState())
			return BH_RUNNING;
		if (CustomCyberActor.CurrentWeapon)
		{
			CustomCyberActor.A_ChangeModel("", 1, "MODELS/SuperCyberSoldierMale2", "NoWeapon.iqm", 1, "", "");
			CustomCyberActor.CurrentWeapon = null;
		}
		CustomCyberActor.UpdateStateLabel("Fireball", true);
		CustomCyberActor.GiveInventory('ShieldBoost', 1);
		return BH_SUCCESS;
	}
}

// Node Hand1: check if fit for a energy attack.
class SuperCyberSoldierMale2_AINode_Hand : TUtilityBehavior
{
	static SuperCyberSoldierMale2_AINode_Hand Create()
	{
		SuperCyberSoldierMale2_AINode_Hand Result = New('SuperCyberSoldierMale2_AINode_Hand');
		return Result;
	}
	override double CalculateUtility(TCustomCyberActor CustomCyberActor)
	{
		TPriorityQueueItem PriorityQueueItem = CustomCyberActor.PriorityQueue.Items[0];
		if (PriorityQueueItem.ExperiencedThreatLevel == ETL_CRITICAL)
			return 0.4;
		if (PriorityQueueItem.ExperiencedThreatLevel == ETL_DANGER)
			return 0.4;
		switch (PriorityQueueItem.ThreatLevel)
		{
			case THREAT_UNSTOPPABLE:
				return 0.4;
				break;
			case THREAT_SUPERDANGER:
				return 0.4;
				break;
			case THREAT_VERYDANGEROUS:
				return 0.4;
				break;
			case THREAT_DANGEROUS:
				return 0.4;
				break;
			case THREAT_ABOVENORMAL:
				return 0;
				break;
			case THREAT_NORMAL:
				return 0;
				break;
			case THREAT_MILD:
				return 0;
				break;
			case THREAT_LOW:
				return 0;
				break;
			case THREAT_VERYLOW:
				return 0;
				break;
			case THREAT_NONE:
				return 0;
				break;
			default:
				return 0;
				break;
		}
		return 0;
	}
	override TStatus Update(TCustomCyberActor CustomCyberActor)
	{
		if (CustomCyberActor.IsInAttackState())
			return BH_RUNNING;
		if (CustomCyberActor.CurrentWeapon)
		{
			CustomCyberActor.A_ChangeModel("", 1, "MODELS/SuperCyberSoldierMale2", "NoWeapon.iqm", 1, "", "");
			CustomCyberActor.CurrentWeapon = null;
		}
		CustomCyberActor.UpdateStateLabel("Hand", true);
		CustomCyberActor.GiveInventory('ShieldBoost', 1);
		return BH_SUCCESS;
	}
}

// Node Hand2: check if fit for a energy attack.
class SuperCyberSoldierMale2_AINode_Hand2 : TUtilityBehavior
{
	static SuperCyberSoldierMale2_AINode_Hand2 Create()
	{
		SuperCyberSoldierMale2_AINode_Hand2 Result = New('SuperCyberSoldierMale2_AINode_Hand2');
		return Result;
	}
	override double CalculateUtility(TCustomCyberActor CustomCyberActor)
	{
		TPriorityQueueItem PriorityQueueItem = CustomCyberActor.PriorityQueue.Items[0];
		if (PriorityQueueItem.ExperiencedThreatLevel == ETL_CRITICAL)
			return 0;
		if (PriorityQueueItem.ExperiencedThreatLevel == ETL_DANGER)
			return 0;
		switch (PriorityQueueItem.ThreatLevel)
		{
			case THREAT_UNSTOPPABLE:
				return 0;
				break;
			case THREAT_SUPERDANGER:
				return 0;
				break;
			case THREAT_VERYDANGEROUS:
				return 0;
				break;
			case THREAT_DANGEROUS:
				return 0;
				break;
			case THREAT_ABOVENORMAL:
				return 0.3;
				break;
			case THREAT_NORMAL:
				return 0.3;
				break;
			case THREAT_MILD:
				return 0.3;
				break;
			case THREAT_LOW:
				return 0.3;
				break;
			case THREAT_VERYLOW:
				return 0.3;
				break;
			case THREAT_NONE:
				return 0.3;
				break;
			default:
				return 0;
				break;
		}
		return 0;
	}
	override TStatus Update(TCustomCyberActor CustomCyberActor)
	{
		if (CustomCyberActor.IsInAttackState())
			return BH_RUNNING;
		if (CustomCyberActor.CurrentWeapon)
		{
			CustomCyberActor.A_ChangeModel("", 1, "MODELS/SuperCyberSoldierMale2", "NoWeapon.iqm", 1, "", "");
			CustomCyberActor.CurrentWeapon = null;
		}
		CustomCyberActor.UpdateStateLabel("Hand2", true);
		CustomCyberActor.GiveInventory('ShieldBoost', 1);
		return BH_SUCCESS;
	}
}

// Node Punch: check if fit for a punch attack.
class SuperCyberSoldierMale2_AINode_Punch : TUtilityBehavior
{
	double MaxDistance; // Actually is squared for performance reasons.
	static SuperCyberSoldierMale2_AINode_Punch Create(double MaxDistance = 128)
	{
		SuperCyberSoldierMale2_AINode_Punch Result = New('SuperCyberSoldierMale2_AINode_Punch');
		Result.MaxDistance = MaxDistance ** 2;
		return Result;
	}
	override double CalculateUtility(TCustomCyberActor CustomCyberActor)
	{
		if (CustomCyberActor.Distance2DSquared(CustomCyberActor.Target) <= MaxDistance)
		{
			TPriorityQueueItem PriorityQueueItem = CustomCyberActor.PriorityQueue.Items[0];
			if (PriorityQueueItem.ExperiencedThreatLevel == ETL_CRITICAL)
				return 0;
			if (PriorityQueueItem.ExperiencedThreatLevel == ETL_DANGER)
				return 0;
			switch (PriorityQueueItem.ThreatLevel)
			{
				case THREAT_UNSTOPPABLE:
					return 0;
					break;
				case THREAT_SUPERDANGER:
					return 0;
					break;
				case THREAT_VERYDANGEROUS:
					return 0;
					break;
				case THREAT_DANGEROUS:
					return 0;
					break;
				case THREAT_ABOVENORMAL:
					return 0.7;
					break;
				case THREAT_NORMAL:
					return 0.7;
					break;
				case THREAT_MILD:
					return 0.7;
					break;
				case THREAT_LOW:
					return 0.7;
					break;
				case THREAT_VERYLOW:
					return 0.7;
					break;
				case THREAT_NONE:
					return 0.7;
					break;
				default:
					return 0;
					break;
			}
			return 0;
		}
		return 0;
	}
	override TStatus Update(TCustomCyberActor CustomCyberActor)
	{
		if (CustomCyberActor.IsInAttackState())
			return BH_RUNNING;
		if (CustomCyberActor.CurrentWeapon)
		{
			CustomCyberActor.A_ChangeModel("", 1, "MODELS/SuperCyberSoldierMale2", "NoWeapon.iqm", 1, "", "");
			CustomCyberActor.CurrentWeapon = null;
		}
		switch ( Random[SuperCyberSoldierMale2](1, 3) )
		{
			case 1:
				CustomCyberActor.UpdateStateLabel("Punch", true);
				break;
			case 2:
				CustomCyberActor.UpdateStateLabel("QuadPunch", true);
				break;
			case 3:
				CustomCyberActor.UpdateStateLabel("Kick", true);
				break;
		}
		CustomCyberActor.GiveInventory('ShieldBoost', 1);
		return BH_SUCCESS;
	}
}

// Node Stomp: check if fit for stomping smaller foes.
class SuperCyberSoldierMale2_AINode_Stomp : TUtilityBehavior
{
	double MaxDistance; // Actually is squared for performance reasons.
	static SuperCyberSoldierMale2_AINode_Stomp Create(double MaxDistance = 128)
	{
		SuperCyberSoldierMale2_AINode_Stomp Result = New('SuperCyberSoldierMale2_AINode_Stomp');
		Result.MaxDistance = MaxDistance ** 2;
		return Result;
	}
	override double CalculateUtility(TCustomCyberActor CustomCyberActor)
	{
		Actor Target = CustomCyberActor.Target;
		if (CustomCyberActor.Distance2DSquared(CustomCyberActor.Target) <= MaxDistance)
			if ((Target.Height <= 60) && (Target.default.Health <= 256))
				return 0.9;
		return 0;
	}
	override TStatus Update(TCustomCyberActor CustomCyberActor)
	{
		if (CustomCyberActor.IsInAttackState())
			return BH_RUNNING;
		if (CustomCyberActor.CurrentWeapon)
		{
			CustomCyberActor.A_ChangeModel("", 1, "MODELS/SuperCyberSoldierMale2", "NoWeapon.iqm", 1, "", "");
			CustomCyberActor.CurrentWeapon = null;
		}
		CustomCyberActor.UpdateStateLabel("Stomp", true);
		CustomCyberActor.GiveInventory('ShieldBoost', 1);
		return BH_SUCCESS;
	}
}

// Node CombatLG: check if fit for LightningGun usage.
class SuperCyberSoldierMale2_AINode_CombatLG : TUtilityBehavior
{
	double MaxDistance; // Actually is squared for performance reasons.
	static SuperCyberSoldierMale2_AINode_CombatLG Create(double MaxDistance = 384)
	{
		SuperCyberSoldierMale2_AINode_CombatLG Result = New('SuperCyberSoldierMale2_AINode_CombatLG');
		Result.MaxDistance = MaxDistance ** 2;
		return Result;
	}
	override double CalculateUtility(TCustomCyberActor CustomCyberActor)
	{
		TPriorityQueueItem PriorityQueueItem = CustomCyberActor.PriorityQueue.Items[0];
		if (PriorityQueueItem.ExperiencedThreatLevel == ETL_CRITICAL)
			return 0;
		if (PriorityQueueItem.ExperiencedThreatLevel == ETL_DANGER)
			return 0;
		if (CustomCyberActor.Distance2DSquared(CustomCyberActor.Target) <= MaxDistance)
		{
			if ((CustomCyberActor.Target.Health <= 70) || (CustomCyberActor.Target.Player))
				return 0.6;
			switch (PriorityQueueItem.ThreatLevel)
			{
				case THREAT_UNSTOPPABLE:
					return 0;
					break;
				case THREAT_SUPERDANGER:
					return 0;
					break;
				case THREAT_VERYDANGEROUS:
					return 0;
					break;
				case THREAT_DANGEROUS:
					return 0.6;
					break;
				case THREAT_ABOVENORMAL:
					return 0.6;
					break;
				case THREAT_NORMAL:
					return 0.6;
					break;
				case THREAT_MILD:
					return 0.6;
					break;
				case THREAT_LOW:
					return 0.6;
					break;
				case THREAT_VERYLOW:
					return 0.6;
					break;
				case THREAT_NONE:
					return 0.6;
					break;
				default:
					return 0;
					break;
			}
			return 0;
		}
		return 0;
	}
	override TStatus Update(TCustomCyberActor CustomCyberActor)
	{
		if (CustomCyberActor.WeaponCooldown == 0)
		{
			CustomCyberActor.UpdateStateLabel("Rifle.Fire", true);
			if (CustomCyberActor.CurrentWeapon != 'LightningGun')
			{
				CustomCyberActor.A_ChangeModel("", 1, "MODELS/SuperCyberSoldierMale2", "LightningGun.iqm", 1, "MODELS/LightningGun", "LightningGun.png");
				CustomCyberActor.CurrentWeapon = 'LightningGun';
				CustomCyberActor.WeaponCooldown = 2;
				return BH_RUNNING;
			}
			CustomCyberActor.A_StartSound("weapons/lg", CHAN_WEAPON);
			CustomCyberActor.B_Missile('LightningGunProjectile', 64);
			CustomCyberActor.WeaponCooldown = 4;
		}
		return BH_SUCCESS;
	}
}

// Node CombatCR: check if fit for CyberRifle usage.
class SuperCyberSoldierMale2_AINode_CombatCR : TUtilityBehavior
{
	double MaxDistance; // Actually is squared for performance reasons.
	static SuperCyberSoldierMale2_AINode_CombatCR Create(double MaxDistance = 1024)
	{
		SuperCyberSoldierMale2_AINode_CombatCR Result = New('SuperCyberSoldierMale2_AINode_CombatCR');
		Result.MaxDistance = MaxDistance ** 2;
		return Result;
	}
	override double CalculateUtility(TCustomCyberActor CustomCyberActor)
	{
		TPriorityQueueItem PriorityQueueItem = CustomCyberActor.PriorityQueue.Items[0];
		if (PriorityQueueItem.ExperiencedThreatLevel == ETL_CRITICAL)
			return 0;
		if (PriorityQueueItem.ExperiencedThreatLevel == ETL_DANGER)
			return 0;
		if (CustomCyberActor.Distance2DSquared(CustomCyberActor.Target) <= MaxDistance)
		{
			if ((CustomCyberActor.Target.Health <= 2560) || (CustomCyberActor.Target.Player))
				return 0.5;
			switch (PriorityQueueItem.ThreatLevel)
			{
				case THREAT_UNSTOPPABLE:
					return 0;
					break;
				case THREAT_SUPERDANGER:
					return 0;
					break;
				case THREAT_VERYDANGEROUS:
					return 0;
					break;
				case THREAT_DANGEROUS:
					return 0.5;
					break;
				case THREAT_ABOVENORMAL:
					return 0.5;
					break;
				case THREAT_NORMAL:
					return 0.5;
					break;
				case THREAT_MILD:
					return 0.5;
					break;
				case THREAT_LOW:
					return 0.5;
					break;
				case THREAT_VERYLOW:
					return 0.5;
					break;
				case THREAT_NONE:
					return 0.5;
					break;
				default:
					return 0;
					break;
			}
			return 0;
		}
		return 0;
	}
	override TStatus Update(TCustomCyberActor CustomCyberActor)
	{
		if (CustomCyberActor.WeaponCooldown == 0)
		{
			CustomCyberActor.UpdateStateLabel("Rifle.Fire", true);
			if (CustomCyberActor.CurrentWeapon != 'CyberRifle')
			{
				CustomCyberActor.A_ChangeModel("", 1, "MODELS/SuperCyberSoldierMale2", "CyberRifle.iqm", 1, "MODELS/CyberRifle", "BaseTexture.png");
				CustomCyberActor.CurrentWeapon = 'CyberRifle';
				CustomCyberActor.WeaponCooldown = 2;
				return BH_RUNNING;
			}
			CustomCyberActor.A_StartSound("weapons/cr", CHAN_WEAPON);
			CustomCyberActor.B_Missile('CyberRifleProjectile', 64);
			CustomCyberActor.WeaponCooldown = 4;
		}
		return BH_SUCCESS;
	}
}

// Node CombatLG: check if fit for PlasmaLaserCannon usage.
class SuperCyberSoldierMale2_AINode_CombatPLC : TUtilityBehavior
{
	double MaxDistance; // Actually is squared for performance reasons.
	static SuperCyberSoldierMale2_AINode_CombatPLC Create(double MaxDistance = 1024)
	{
		SuperCyberSoldierMale2_AINode_CombatPLC Result = New('SuperCyberSoldierMale2_AINode_CombatPLC');
		Result.MaxDistance = MaxDistance ** 2;
		return Result;
	}
	override double CalculateUtility(TCustomCyberActor CustomCyberActor)
	{
		TPriorityQueueItem PriorityQueueItem = CustomCyberActor.PriorityQueue.Items[0];
		if (PriorityQueueItem.ExperiencedThreatLevel == ETL_CRITICAL)
			return 0.7;
		if (PriorityQueueItem.ExperiencedThreatLevel == ETL_DANGER)
			return 0.7;
		if (CustomCyberActor.Distance2DSquared(CustomCyberActor.Target) <= MaxDistance)
		{
			if (CustomCyberActor.Target.Health > 2560)
				return 0.7;
			switch (PriorityQueueItem.ThreatLevel)
			{
				case THREAT_UNSTOPPABLE:
					return 0.7;
					break;
				case THREAT_SUPERDANGER:
					return 0.7;
					break;
				case THREAT_VERYDANGEROUS:
					return 0.7;
					break;
				case THREAT_DANGEROUS:
					return 0;
					break;
				case THREAT_ABOVENORMAL:
					return 0;
					break;
				case THREAT_NORMAL:
					return 0;
					break;
				case THREAT_MILD:
					return 0;
					break;
				case THREAT_LOW:
					return 0;
					break;
				case THREAT_VERYLOW:
					return 0;
					break;
				case THREAT_NONE:
					return 0;
					break;
				default:
					return 0;
					break;
			}
			return 0;
		}
		return 0;
	}
	override TStatus Update(TCustomCyberActor CustomCyberActor)
	{
		if (CustomCyberActor.WeaponCooldown == 0)
		{
			CustomCyberActor.UpdateStateLabel("Rifle.Fire", true);
			if (CustomCyberActor.CurrentWeapon != 'SuperPlasmaLaserCannon')
			{
				CustomCyberActor.A_ChangeModel("", 1, "MODELS/SuperCyberSoldierMale2", "PlasmaLaserCannon.iqm", 1, "MODELS/PlasmaLaserCannon", "BaseTexture.png");
				CustomCyberActor.CurrentWeapon = 'SuperPlasmaLaserCannon';
				CustomCyberActor.WeaponCooldown = 2;
				return BH_RUNNING;
			}
			CustomCyberActor.A_StartSound("weapons/splc", CHAN_WEAPON);
			for (int I = 0; I < 24; I++)
				CustomCyberActor.B_Missile('PlasmaLaserCannonProjectile', 64, Random2() * (1.125 / 256));
			CustomCyberActor.WeaponCooldown = 11;
		}
		return BH_SUCCESS;
	}
}

// -----------------------------------------------------------------------------
// SuperCyberSoldierMale2.
// -----------------------------------------------------------------------------

class SuperCyberSoldierMale2 : TCyberAdvanced abstract
{
	override void InitBehavior()
	{
		MeleeState = FindState("Melee", true);
		MissileState = FindState("Missile", true);
		AttackStates.Push(MeleeState);
		AttackStates.Push(MissileState);
		AttackStates.Push(FindState("FireBall", true));
		AttackStates.Push(FindState("Hand", true));
		AttackStates.Push(FindState("Hand2", true));
		AttackStates.Push(FindState("Kick", true));
		AttackStates.Push(FindState("Punch", true));
		AttackStates.Push(FindState("QuadPunch", true));
		AttackStates.Push(FindState("Stomp", true));
		AttackStates.Push(FindState("Rifle.Fire", true));
		GestureAnimations.Push(FindState("Charge", true));
		GestureAnimations.Push(FindState("Taunt", true));
		TBehaviorTreeManager BehaviorTreeManager = TBehaviorTreeManager.GetInstance();
		Behavior = BehaviorTreeManager.GetBehavior(self.GetClass());
		if (!Behavior)
		{
			Behavior = TSequence.Create()
				.AddBehavior(TCyberBasic_AINode_TimeFreeze.Create())
				.AddBehavior(TCyberBasic_AINode_BasicLife.Create())
				.AddBehavior(
					TSelector.Create() // Strategy selector
						.AddBehavior(TCyberBasic_AINode_SearchHelp.Create())
						.AddBehavior(TCyberBasic_AINode_Goal.Create())
						.AddBehavior(TCyberBasic_AINode_Fight.Create())
						.AddBehavior(SuperCyberSoldierMale2_AINode_Gesture.Create())
						.AddBehavior(SuperCyberSoldierMale2_AINode_Rest.Create())
				)
				.AddBehavior(
					TSequence.Create()
					.AddBehavior(SuperCyberSoldierMale2_AINode_ChaseMode.Create(10, 20, 24))
					.AddBehavior(
						TSelector.Create() // Tactical selector
							.AddBehavior(TCyberBasic_AINode_Jump.Create(9))
							.AddBehavior(TCyberBasic_AINode_CoverZone.Create())
							.AddBehavior(SuperCyberSoldierMale2_AINode_NextMove.Create())
					)
					.AddBehavior(TCyberBasic_AINode_Move.Create())
					.AddBehavior(TCyberBasic_AINode_CloackingDevice.Create())
				)
				.AddBehavior(
					TSequence.Create()
					.AddBehavior(TCyberBasic_AINode_BasicCombat.Create())
					.AddBehavior(
						TUtilitySelector.Create()
							.AddBehavior(SuperCyberSoldierMale2_AINode_Punch.Create())
							.AddBehavior(SuperCyberSoldierMale2_AINode_Stomp.Create())
							.AddBehavior(SuperCyberSoldierMale2_AINode_Fireball.Create())
							.AddBehavior(SuperCyberSoldierMale2_AINode_Hand.Create())
							.AddBehavior(SuperCyberSoldierMale2_AINode_Hand2.Create())
							.AddBehavior(SuperCyberSoldierMale2_AINode_CombatLG.Create())
							.AddBehavior(SuperCyberSoldierMale2_AINode_CombatCR.Create())
							.AddBehavior(SuperCyberSoldierMale2_AINode_CombatPLC.Create())
					)
				)
			;
			BehaviorTreeManager.AddBehavior(self.GetClass(), Behavior);
		}
	}
	override void Initialize()
	{
		super.Initialize();
		A_GiveInventory('EnergyShield1', 1);
	}
	virtual void B_IdleNormal()
	{
		CurrentWeapon = null;
		A_ChangeModel("", 1, "MODELS/SuperCyberSoldierMale2", "NoWeapon.iqm", 1, "", "");
		UpdateStateLabel("Idle");
	}
	virtual void B_MissileFireballCharge()
	{
		if ( Target )
			A_SpawnItemEx("KiBallCharging", +24, -24, 72);
	}
	virtual void B_MissileFireball()
	{
		if (Target)
		{
			B_Missile("LargeKiBall", 64);
		}
	}
	virtual void B_MissileHand()
	{
		if ( Target )
		{
			B_Missile("CyberBallLarge", 64);
		}
	}
	virtual void B_MissileHand2()
	{
		if ( Target )
		{
			B_Missile("SmallKiBall", 40);
		}
	}
	virtual void B_Kick()
	{
		if ( Target )
			A_CustomMeleeAttack(Random(1, 8) * 48, "SuperSoldierMale/Melee");
	}
	virtual void B_Punch()
	{
		if ( Target )
			A_CustomMeleeAttack(Random(1, 8) * 12, "SuperSoldierMale/Melee");
	}
	virtual void B_Stomp()
	{
		if ((Target) && (Target.Height <= 60) && (Target.default.Health) <= 256 && (Target.default.Health > 0))
		{
			if ( Distance2D(Target) <= Radius + Target.Radius + 40 )
			{
				Target.GiveInventory('StompToken', 1);
				Target.DamageMobj(self, self, Target.Health, "Normal", DMG_FORCED);
			}
		}
	}
	virtual void B_Pain()
	{
		A_Pain();
		A_GiveInventory('ShieldBoost', 1);
	}
	default
	{
		CameraHeight 160;
		DropItem "CyberBattery", 192;
		DropItem "CyberBatteryPack", 32;
		DropItem "LightningGun", 64;
		DropItem "CyberRifle", 64;
		DropItem "SuperPlasmaLaserCannon", 64;
		DropItem "SuperCyberArmor", 11;
		Health 4900;
		Height 80;
		Mass 10000;
		MeleeRange 80;
		PainChance 80;
		Radius 28;
		Speed 12;
		Tag "Super Cyber Soldier Male LVL 2";
		KAI_Actor.AggressionMultiplier 0.5;
		KAI_Actor.ThreatLevel THREAT_SUPERDANGER;
		KAI_Actor.ThreatLevelThreshold THREAT_SUPERDANGER;
		ActiveSound "SuperSoldierMale/Active";
		DeathSound "SuperSoldierMale/Death";
		PainSound "SuperSoldierMale/Pain";
		SeeSound "SuperSoldierMale/Sight";
	}
	states
	{
		Spawn:
			TNT1 A 0;
			goto Think;
		See:
			---- A 0;
			goto Think;
		Melee:
			---- A 0;
			goto Think;
		Missile:
			---- A 0;
			goto Think;
		Pain:
			---- A 0 B_Pain();
			goto Think;
		Death:
			NDE0 A 1 B_Die();
			NDE0 BCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NDE1 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NDE2 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NDE3 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NDE4 AB 1;
			NDE4 C -1;
			stop;
		Raise:
			NRA0 A 1 Initialize();
			NRA0 BCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NRA1 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NRA2 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NRA3 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NRA4 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NRA5 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NRA6 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NRA7 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NRA8 ABCDEFGHIJKLMNOPQRSTU 1;
			goto Think;
		Think:
			---- A 0 B_Think();
			loop; // Never, it is safe!
		Charge:
			NCH0 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NCH1 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NCH2 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NCH3 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NCH4 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NCH5 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NCH6 ABCDEFGHIJKLMNOP 1;
			goto Think;
		FireBall:
			NFB0 A 1 B_MissileFireballCharge();
			NFB0 BCDEFGHIJKLMNOPQRSTUVWXYZ 1 A_FaceTarget();
			NFB1 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1 A_FaceTarget();
			NFB2 ABCDEFGHIJKL 1 A_FaceTarget();
			NFB2 M 1 B_MissileFireball();
			NFB2 NOPQRSTUVWXYZ 1 A_FaceTarget();
			NFB3 ABCDEFGHIJKLMNOPQRSTUVWX 1 A_FaceTarget();
			goto Think;
		Hand:
			NHR0 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1 A_FaceTarget();
			NHR1 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1 A_FaceTarget();
			NHR2 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1 A_FaceTarget();
			NHR3 A 1 B_MissileHand();
			NHR3 BCDEFGHIJKLMNOPQRSTUVWXYZ 1 A_FaceTarget();
			NHR4 ABCDEFGHIJKLMNOPQRS 1 A_FaceTarget();
			goto Think;
		Hand2:
			NH20 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1 A_FaceTarget();
			NH21 ABCDEFGHIJ 1 A_FaceTarget();
			NH21 KLMNOPQRSTUVWXYZ 1 B_MissileHand2();
			NH22 ABCDEFGH 1 B_MissileHand2();
			NH22 IJKLMNOPQRSTUVWXYZ 1 A_FaceTarget();
			NH23 ABCD 1 A_FaceTarget();
			goto Think;
		Heal:
			NHE0 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NHE1 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NHE2 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NHE3 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NHE4 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NHE5 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NHE6 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NHE7 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NHE8 ABCDEFGHIJKLMNOPQ 1;
			goto Think;
		Idle:
			NID0 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NID1 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NID2 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NID3 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NID4 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NID5 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NID6 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NID7 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NID8 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NID9 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NIDA ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NIDB ABCDEFGHIJKLMNO 1;
			#### # 0 PlayActiveSound();
			goto Think;
		Jump:
			NJU0 A 1 B_JumpBegin();
			NJU0 BCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NJU1 ABCD 1;
			NJU1 E 1 B_JumpEnd();
			goto Think;
		Kick:
			NKI0 ABCDEFGHIJKLMNOPQRST 1 B_MoveForward();
			NKI0 U 1 B_Kick();
			NKI0 VWXYZ 1 B_MoveBackward();
			NKI1 ABCDEFGHIJKLMNOPQRST 1 B_MoveBackward();
			goto Think;
		Punch:
			NPU0 ABCDEFGHIJ 1 B_MoveForward();
			NPU0 K 1 B_Punch();
			NPU0 LMNOPQRSTUVWXYZ 1 B_MoveBackward();
			NPU1 A 1 B_MoveBackward();
			goto Think;
		QuadPunch:
			NQP0 ABCDEFGHIJKLMNOP 1 B_MoveForward();
			NQP0 Q 1 B_Punch();
			NQP0 RSTU 1 B_MoveForward();
			NQP0 V 1 B_Punch();
			NQP0 WXYZ 1 B_MoveForward();
			NQP1 ABCD 1 B_MoveForward();
			NQP1 E 1 B_Punch();
			NQP1 FGHI 1 B_MoveForward();
			NQP1 J 1 B_Punch();
			NQP1 KLMNOPQRSTUVWXYZ 1 B_MoveBackward();
			NQP2 ABCDEFGHIJKLMNO 1 B_MoveBackward();
			goto Think;
		Run:
			NRU0 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NRU1 AB 1;
			goto Think;
		RunFast:
			NRF0 ABCDEFGHIJKLMNOPQRST 1;
			goto Think;
		Stomp:
			NST0 ABCDEFGHIJKLMN 1 B_MoveForward();
			NST0 O 1 A_ChangeVelocity(0, 0, 12, CVF_RELATIVE);
			NST0 PQRSTUVWXYZ 1 B_MoveForward();
			NST1 ABCDEFGHIJ 1 B_MoveForward();
			NST1 K 1 B_Stomp();
			NST1 LMNOPQRSTUVWXYZ 1;
			NST2 ABCDEFGHIJKLMNOPQRST 1;
			goto Think;
		Swim:
			NSW0 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NSW1 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NSW2 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NSW3 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NSW4 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NSW5 ABCDEFG 1;
			goto Think;
		Taunt:
			NTA0 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NTA1 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NTA2 ABCDEFGH 1;
			goto Think;
		Walk:
			NWA0 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NWA1 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NWA2 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NWA3 ABCDEFGHI 1;
			goto Think;
		Water:
			NWT0 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NWT1 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NWT2 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			NWT3 ABCDEFGHIJKLM 1;
			goto Think;
		Rifle.Idle:
			WID0 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			WID1 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			WID2 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			WID3 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			WID4 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			WID5 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			WID6 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			WID7 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			WID8 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			WID9 ABCDEFGHIJKLMNOPQRSTUVWX 1;
			#### # 0 B_IdleNormal();
			goto Think;
		Rifle.Run:
			WRU0 ABCDEFGHIJKLMNOPQR 1;
			goto Think;
		Rifle.Fire:
			WFI0 A 1 A_Jump(16, "Think");
			WFI0 BCD 1 A_FaceTarget();
			WFI0 E 1 A_MonsterRefire(0, "Think");
			goto Rifle.Fire;
	}
}
class SuperCyberSoldierMale2BlueMetallic   : SuperCyberSoldierMale2 {}
class SuperCyberSoldierMale2DarkGreenPaint : SuperCyberSoldierMale2 {}
class SuperCyberSoldierMale2DarkMetallic   : SuperCyberSoldierMale2 {}
class SuperCyberSoldierMale2GrayPaint      : SuperCyberSoldierMale2 {}
class SuperCyberSoldierMale2GreenPaint     : SuperCyberSoldierMale2 {}
class SuperCyberSoldierMale2Medic          : SuperCyberSoldierMale2
{
	override void InitBehavior()
	{
		MeleeState = FindState("Melee", true);
		MissileState = FindState("Missile", true);
		AttackStates.Push(MeleeState);
		AttackStates.Push(MissileState);
		AttackStates.Push(FindState("FireBall", true));
		AttackStates.Push(FindState("Hand", true));
		AttackStates.Push(FindState("Hand2", true));
		AttackStates.Push(FindState("KickFront", true));
		AttackStates.Push(FindState("KickLateral", true));
		AttackStates.Push(FindState("Punch", true));
		AttackStates.Push(FindState("QuadPunch", true));
		AttackStates.Push(FindState("Stomp", true));
		AttackStates.Push(FindState("Rifle.Fire", true));
		GestureAnimations.Push(FindState("Charge", true));
		GestureAnimations.Push(FindState("Taunt", true));
		TBehaviorTreeManager BehaviorTreeManager = TBehaviorTreeManager.GetInstance();
		Behavior = BehaviorTreeManager.GetBehavior(self.GetClass());
		if (!Behavior)
		{
			Behavior = TSequence.Create()
				.AddBehavior(TCyberBasic_AINode_TimeFreeze.Create())
				.AddBehavior(TCyberBasic_AINode_BasicLife.Create())
				.AddBehavior(
					TSelector.Create() // Strategy selector
						.AddBehavior(TCyberBasic_AINode_SearchHelp.Create())
						.AddBehavior(TCyberBasic_AINode_GiveAid.Create())
						.AddBehavior(TCyberBasic_AINode_Goal.Create())
						.AddBehavior(TCyberBasic_AINode_Fight.Create())
						.AddBehavior(SuperCyberSoldierMale2_AINode_Gesture.Create())
						.AddBehavior(SuperCyberSoldierMale2_AINode_Rest.Create())
				)
				.AddBehavior(
					TSequence.Create()
					.AddBehavior(SuperCyberSoldierMale2_AINode_ChaseMode.Create(10, 20, 24))
					.AddBehavior(
						TSelector.Create() // Tactical selector
							.AddBehavior(TCyberBasic_AINode_Jump.Create(9))
							.AddBehavior(TCyberBasic_AINode_CoverZone.Create())
							.AddBehavior(SuperCyberSoldierMale2_AINode_NextMove.Create())
					)
					.AddBehavior(TCyberBasic_AINode_Move.Create())
					.AddBehavior(TCyberBasic_AINode_CloackingDevice.Create())
				)
				.AddBehavior(
					TSequence.Create()
					.AddBehavior(TCyberBasic_AINode_BasicCombat.Create())
					.AddBehavior(
						TUtilitySelector.Create()
							.AddBehavior(SuperCyberSoldierMale2_AINode_Punch.Create())
							.AddBehavior(SuperCyberSoldierMale2_AINode_Stomp.Create())
							.AddBehavior(SuperCyberSoldierMale2_AINode_Fireball.Create())
							.AddBehavior(SuperCyberSoldierMale2_AINode_Hand.Create())
							.AddBehavior(SuperCyberSoldierMale2_AINode_Hand2.Create())
							.AddBehavior(SuperCyberSoldierMale2_AINode_CombatLG.Create())
							.AddBehavior(SuperCyberSoldierMale2_AINode_CombatCR.Create())
							.AddBehavior(SuperCyberSoldierMale2_AINode_CombatPLC.Create())
					)
				)
			;
			BehaviorTreeManager.AddBehavior(self.GetClass(), Behavior);
		}
	}
	default
	{
		Tag "Super Cyber Soldier Male LVL 2 (Medic)";
		+TCustomNavMeshActor.NavMeshMedic;
	}
}
class SuperCyberSoldierMale2RedMetallic    : SuperCyberSoldierMale2 {}
