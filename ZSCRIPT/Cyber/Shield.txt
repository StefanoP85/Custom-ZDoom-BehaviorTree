//==============================================================================
//
// Energy Shield.
//
//==============================================================================

class ShieldBlood : Actor
{
	override void PostBeginPlay()
	{
		Vel = (0, 0, 0);
	}
	default
	{
		Height 1;
		Radius 1;
		RenderStyle "Add";
		Scale 0.25;
		+NoGravity;
		+NoInteraction;
	}
	states
	{
		Spawn:
			FHIT ABCDEFGHI 4 bright;
			stop;
	}
}

class CustomLightning : Actor abstract
{
	uint FDoFlash;
	int FFlashTic;
	Property FlashTic : FFlashTic;
	FlagDef DoFlash : FDoFlash, 0;
	override void Tick()
	{
		if ( Alpha < 0 )
		{
			destroy();
			return;
		}
		if ( isFrozen() )
			return;
		if( !FDoFlash || FFlashTic == 0 )
			bInvisible = false;
		else
			if( !(Level.Time % FFlashTic) )
				bInvisible = !bInvisible;
		if ( Tics != -1 )
		{
			if ( Tics > 0 )
				Tics--;
			while ( !Tics )
				if ( !SetState(CurState.NextState) )
					return;
		}
	}
	default
	{
		Alpha 1.0;
		Radius 1;
		RenderStyle "Add";
		+NoInteraction;
	}
}

class ShieldLightning : CustomLightning
{
	default
	{
		Scale 0.05;
		Translation "0:255=@80[4,8,76]";
		CustomLightning.FlashTic 2;
		+CustomLightning.DoFlash;
	}
	states
	{
		Spawn:
			BEAM A 1 bright A_FadeOut(0.04); // 0.14
			wait;
	}
}

class CustomShieldLightningAnimator : CustomInventory
{
	private static Vector3 GetDir(double A, double P)
	{
		return (Cos(A) * Cos(P), Sin(A) * Cos(P), -Sin(P));
	}
	static void SpawnLightning(Vector3 Pos, Vector2 Angles, class<CustomLightning> Type = 'ShieldLightning', double Dist = 200, double StepSize = 1.0, double Strength = 2.0, double Roughness = 20.0, double Variance = 30, double BranchChance = 80)
	{
		// Initialize.
		CustomLightning Prev;
		double Str = Strength;
		double BoltAlpha = FRandom(0.08, 1.0);
		double PitchMov;
		int AdjustedDist = Max(Dist * 1, 5);
		for ( double Len = 0; Len < AdjustedDist; Len += StepSize )
		{
			// Get Lightning spawn position.
			Vector3 SpawnPos;
			Vector3 SourcePos = Pos;
			Vector2 SourceAngles = Angles;
			if ( Prev )
			{
				SourceAngles = (Prev.angle, Prev.Pitch - 90);
				SourcePos = Prev.Pos;
			}
			Vector3 Dir = GetDir(SourceAngles.X, SourceAngles.Y);
			SpawnPos = level.Vec3Offset(SourcePos, Dir * StepSize);
			// Spawn Lightning.
			let Lightning = CustomLightning(Actor.Spawn(Type, SpawnPos));
			if ( Lightning )
			{
				Lightning.Alpha = BoltAlpha;
				Lightning.Angle = SourceAngles.X;
				Lightning.Pitch = SourceAngles.Y + 90;
				Lightning.bInvisible = true;
			}
			// Connect current lightning to previous lightning.
			if ( Prev && Lightning )
			{
				// Make current face previous.
				Vector3 ToLightning = Level.SphericalCoords(Lightning.Pos, Prev.Pos, (Lightning.Angle, Lightning.Pitch + 90));
				Lightning.Angle -= ToLightning.X;
				Lightning.Pitch -= ToLightning.Y;
				Prev.Pitch += FRandom(0, Roughness);
				// Update Lightning direction.
				double MoveDir = FRandom[LightningPitch](-Strength, Strength);
				if ( PitchMov > Variance && MoveDir > 0 || PitchMov < -Variance && MoveDir < 0 )
					MoveDir = MoveDir;
				PitchMov += MoveDir;
	   		    Lightning.Pitch += MoveDir;
				// Adjust scale so that current connects to previous' position.
				double ScaleQuanta = (StepSize * Lightning.Scale.X);
				double NewScale = Lightning.Scale.X * (ToLightning.Z / ScaleQuanta);
				Lightning.Scale.Y = NewScale;
				// Random change to branch into smaller bolt.
				if ( BranchChance && (Random(0, BranchChance) == BranchChance) && (Len/Dist) >= 0.5 )
				{
					Vector2 NewAngs = (Lightning.Angle + FRandom(-45, 45), Lightning.Pitch + FRandom(-90, 90));
					SpawnLightning(Lightning.Pos, NewAngs, Type, Dist * 0.25, StepSize, Strength * 2.0, 0);
				}
			}
			Prev = Lightning;
		}
	}
	virtual void DoLightning(Vector3 AtPos, double Amount = 4)
	{
		Vector2 View;
		for ( int I = 0; I < Amount; I++ )
		{
			View.X = Angle + FRandom(-180, 180);
			View.Y = Pitch + FRandom(-60, 60);
			SpawnLightning(AtPos, View, Dist:25, 0.5, 20.0, 10.0, 30, 0);
		}
	}
	virtual void DoParticles(Actor Source, double Amount = 5, double ZOffset = 0, Color PCol = 0xFF0a08f0)
	{
		for ( int I = 0; I < Amount; I++ )
		{
			double Ang = FRandom(0, 360);
			double Pit = FRandom(-45, 45);
			Vector3 Result = (Cos(Ang), Sin(Ang), -Sin(Pit)) * FRandom(4,16);
			Source.A_SpawnParticle(
				PCol, SPF_FULLBRIGHT, 35, 3.0, Ang,
				0,0, ZOffset, Result.X, Result.Y, Result.Z, 0, 0, 0,
				FRandom(0.8,1.0), 0.025
			);
		}
	}
}

class EnergyShield1LightningAnimator : CustomShieldLightningAnimator
{
	states
	{
		Pickup:
			TNT1 AAAAAAAAAAAAAAAAAA 4
			{
				Vector3 AtPos = (Pos.XY, Pos.Z + (Height));
				if ( Player )
					AtPos.Z = Player.ViewZ;
				AtPos.X += FRandom[ShieldFX](-1, 1) * 30;
				AtPos.Y += FRandom[ShieldFX](-1, 1) * 30;
				AtPos.Z += FRandom[ShieldFX](0, 1) * 20;
				Invoker.DoLightning(AtPos, 2);
				Invoker.DoParticles(self, ZOffset:Height);
			}
			stop;
	}
}

class EnergyShield2LightningAnimator : CustomShieldLightningAnimator
{
	states
	{
		Pickup:
			TNT1 AAAAAAAAAAAAAAAAAA 4
			{
				Vector3 AtPos = (Pos.XY, Pos.Z + (Height));
				if ( Player )
					AtPos.Z = Player.ViewZ;
				AtPos.X += FRandom[ShieldFX](-1, 1) * 30;
				AtPos.Y += FRandom[ShieldFX](-1, 1) * 30;
				AtPos.Z += FRandom[ShieldFX](0, 1) * 20;
				Invoker.DoLightning(AtPos, 3);
				Invoker.DoParticles(self, ZOffset:Height);
			}
			stop;
	}
}

class CustomShield : Inventory
{
	double FShields;
	double FMaxShields;
	double FPrevShields;
	double FForwardOffset;
	int FRegenDelay;
	int FRegenSpeed;
	int FRegenTimer;
	bool Regenerating;
	bool RegeneratingSound;
	Sound FShieldBreak;
	Sound FShieldLow;
	Sound FShieldRecharging;
	Sound FShieldTakeDamage;
	Sound FShieldWarning;
	Class<Actor> FShieldBloodType;
	Property Shields : FShields;
	Property MaxShields : FMaxShields;
	Property RegenSpeeds : FRegenDelay, FRegenSpeed;
	Property ForwardOffset : FForwardOffset;
	Property BreakSound : FShieldBreak;
	Property LowSound : FShieldLow;
	Property RechargingSound : FShieldRecharging;
	Property TakeDamageSound : FShieldTakeDamage;
	Property WarningSound : FShieldWarning;
	Property ShieldBloodType : FShieldBloodType;
	override void AttachToOwner(Actor Other)
	{
		super.AttachToOwner(Other);
		FShields = FMaxShields;
	}
	virtual void DisplayShields()
	{
		if ( FShields < FMaxShields && FShields > 0 )
		{
			Alpha = 1.0 - (FShields / FMaxShields);
		}
		else
		{
			Alpha = 0;
		}
		if ( FPrevShields > 0 && FShields <= 0 )
		{
			// Shield broke.
			OnShieldBreak();
		}
		FPrevShields = FShields;
	}
	virtual void OnShieldBreak()
	{
		Owner.A_StopSound(CHAN_5);
		if ( FShieldBreak )
			Owner.A_StartSound(FShieldBreak, CHAN_AUTO, CHANF_OVERLAP);
	}
	virtual void UpdateShields()
	{
		if ( FShields <= 0 )
			FRegenTimer++;
		if ( Regenerating )
			Owner.A_StopSound(CHAN_5);
		else
			if ( FShields < FMaxShields * 0.25 )
				if ( FShieldWarning )
					Owner.A_StartSound(FShieldWarning, CHAN_5, CHANF_LOOPING);
				else
					Owner.A_StopSound(CHAN_5);
			else
				if ( FShields < FMaxShields * 0.5 )
					if ( FShieldLow )
						Owner.A_StartSound(FShieldLow, CHAN_5, CHANF_LOOPING);
					else
						Owner.A_StopSound(CHAN_5);
		// Shield Regen
		if ( FRegenTimer < FRegenDelay )
		{
			FRegenTimer++;
			if ( FShields > FMaxShields)
				FRegenTimer = FRegenDelay;
		}
		FRegenTimer = Clamp(FRegenTimer, -FRegenDelay, FRegenDelay);
		if ( FRegenTimer >= FRegenDelay && FShields < FMaxShields )
		{
			FShields += FMaxShields/FRegenSpeed;
			FShields = Clamp(FShields, 0, FMaxShields);
			Regenerating = true;
			if ( !RegeneratingSound )
			{
				Owner.A_StartSound(FShieldRecharging);
				RegeneratingSound = true;
			}
		}
		else
		{
			Regenerating = false;
			RegeneratingSound = false;
		}
	}
	override void DoEffect()
	{
		// Don't be invisible while held.
		if ( GetAge() <= 1 )
		{
			bInvisible = false;
			// Inventory items by default are unlinked from the world
			// due to this they're normally not rendered when in an actor's
			// inventory. We don't want this behavior so, we relink it.
			A_ChangeLinkFlags(0, 0);
			// This bit has to do with rendering order.
			// Inventory stat num seems to render under the actor it's attached
			// to, which makes it look less visually appealing.
			ChangeStatNum(STAT_DEFAULT);
			return;
		}
		// Make invisible for source, if source is player.
		let LocalPlr = Players[ConsolePlayer].mo;
		if ( LocalPlr == PlayerPawn(Owner) )
		{
			bInvisible = (LocalPlr.player.cheats & CF_CHASECAM) ? false : true;
		}
		// Copy source values.
		Angle = Owner.Angle;
		Pitch = Owner.Pitch;
		Roll  = Owner.Roll;
		Sprite = Owner.Sprite;
		Frame = Owner.Frame;
		Tics = Owner.Tics;
		Vel = Owner.Vel;
		A_SetScale(Owner.Scale.X, Owner.Scale.Y);
		Vector3 Fwd = (
			Cos(Owner.Angle) * Cos(Owner.Pitch),
			Sin(Owner.Angle) * Cos(Owner.Pitch),
			-Sin(Owner.Pitch)
		) * FForwardOffset;
		SetOrigin(Level.Vec3Offset(Owner.pos, vel + Fwd), true);
		// Shield effect logic.
		DisplayShields();
		UpdateShields();
		// Do not run on dead actors.
		if ( Owner.Health <= 0 )
		{
			Owner.A_StopSound(CHAN_5);
			Owner.RemoveInventory(self);
			GoAwayAndDie();
			return;
		}
	}
	virtual double ApplyShieldBleedDamage(int Damage, Name DamageType)
	{
			return Damage;
	}
	virtual double OnShieldDamage(double Damage, Name DamageType, Actor Inflictor, Actor Source)
	{
		// Useful for playing sound effects or other effects when shields take a hit.
		A_StopSound(CHAN_5);
		Owner.A_StartSound(FShieldTakeDamage, Flags:CHANF_NOSTOP);
		return Damage;
	}
	virtual double AdjustDamage(int Damage, Name DamageType)
	{
		return Damage;
	}
	override void ModifyDamage(int Damage, Name DamageType, out int NewDamage, bool Passive, Actor Inflictor, Actor Source, int Flags)
	{
		if ( !Owner || !Passive )
			return;
		Damage = AdjustDamage(Damage, DamageType);
		NewDamage = Max(0, ApplyDamageFactors(GetClass(), DamageType, Damage, Damage));
		if ( Damage > 0 && FShields > 0 )
		{
			// Get real damage amount, taking into account modified damage.
			double TrueDamage = NewDamage;
			FRegenTimer = 0; // Stop regeneration.
			TrueDamage = OnShieldDamage(TrueDamage, DamageType, Inflictor, Source);
			FShields -= TrueDamage;
			NewDamage = 0;
			// Conditionally apply bleed damage through shields.
			if ( FShields <= 0 )
			{
				double TrueDamage = Abs(FShields);
				NewDamage = ApplyShieldBleedDamage(TrueDamage, DamageType);
				FShields = 0;
			}
		}
	}
	default
	{
		Alpha 0.5;
		Inventory.MaxAmount 1;
		RenderStyle "Translucent";
		Scale 1.0;
		Translation "0:255=@65[10,8,240]";
		+InterpolateAngles;
		CustomShield.MaxShields 100;
		CustomShield.RegenSpeeds 4 * 35, 2 * 35;
		CustomShield.ForwardOffset 5;
		CustomShield.BreakSound "Shield/Explode";
		CustomShield.LowSound "Shield/Low";
		CustomShield.RechargingSound "Shield/Regenerate";
		CustomShield.TakeDamageSound "Shield/TakeDamage";
		CustomShield.WarningSound "Shield/Warning";
		CustomShield.ShieldBloodType 'ShieldBlood';
	}
	states
	{
		Held:
			#### # 1;
			loop;
	}
}

class EnergyShield1 : CustomShield
{
	override void OnShieldBreak()
	{
		super.OnShieldBreak();
		Owner.GiveInventory('EnergyShield1LightningAnimator', 1);
	}
	default
	{
		Tag "Energy Shield MK I";
		CustomShield.ForwardOffset 0;
		CustomShield.MaxShields 128;
		CustomShield.RegenSpeeds 4 * 35, 2 * 35;
	}
}

class EnergyShield2 : CustomShield
{
	override void OnShieldBreak()
	{
		super.OnShieldBreak();
		Owner.GiveInventory('EnergyShield2LightningAnimator', 1);
	}
	default
	{
		Tag "Energy Shield MK II";
		CustomShield.ForwardOffset 0;
		CustomShield.MaxShields 256;
		CustomShield.LowSound "Shield2/Low";
		CustomShield.WarningSound "Shield2/Warning";
	}
}

class CyberArmor : Armor
{
	override void AttachToOwner(Actor Other)
	{
		super.AttachToOwner(Other);
		Other.GiveInventory('EnergyShield1', 1);
	}
	override bool HandlePickup(Inventory Item)
	{
		if (item is 'Armor')
		{
			Owner.TakeInventory('EnergyShield1', 1);
			GoAwayAndDie();
			return true;
		}
		return super.HandlePickup(Item);
	}
	default
	{
		Inventory.PickupMessage "You got the Cyber Armor!";
	}
	states
	{
		Spawn:
			ARM0 ABCBA 7 bright;
			loop;
	}
}

class SuperCyberArmor : Armor
{
	override void AttachToOwner(Actor Other)
	{
		super.AttachToOwner(Other);
		Other.GiveInventory('EnergyShield2', 1);
	}
	override bool HandlePickup(Inventory Item)
	{
		if (item is 'Armor')
		{
			Owner.TakeInventory('EnergyShield2', 1);
			GoAwayAndDie();
			return true;
		}
		return super.HandlePickup(Item);
	}
	default
	{
		Inventory.PickupMessage "You got the Super Cyber Armor!";
		+NoGravity;
	}
	states
	{
		Spawn:
			ARMC A 7;
			loop;
	}
}
