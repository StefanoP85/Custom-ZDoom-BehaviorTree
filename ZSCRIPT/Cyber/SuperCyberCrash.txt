//==============================================================================
//
// Super Cyber Crash.
//
//==============================================================================

// -----------------------------------------------------------------------------
// AI nodes.
// -----------------------------------------------------------------------------

// Node CombatSTD: check if fit for a missile attack.
class SuperCyberCrash_AINode_CombatSTD : TUtilityBehavior
{
	static SuperCyberCrash_AINode_CombatSTD Create()
	{
		SuperCyberCrash_AINode_CombatSTD Result = New('SuperCyberCrash_AINode_CombatSTD');
		return Result;
	}
	override double CalculateUtility(TCustomCyberActor CustomCyberActor)
	{
		return 0.5;
	}
	override TStatus Update(TCustomCyberActor CustomCyberActor)
	{
		if (CustomCyberActor.IsInAttackState())
		{
			if (CustomCyberActor.WeaponCooldown == 0)
			{
				CustomCyberActor.B_Missile('SM_Bullet');
				CustomCyberActor.WeaponCooldown = 4;
			}
			return BH_RUNNING;
		}
		if (CustomCyberActor.CheckMissileRange())
		{
			CustomCyberActor.UpdateStateLabel("Missile", true);
			CustomCyberActor.WeaponCooldown = 2;
		}
		return BH_SUCCESS;
	}
}

// Node CombatPLC: check if fit for a missile attack.
class SuperCyberCrash_AINode_CombatPLC : TUtilityBehavior
{
	double MaxDistance; // Actually is squared for performance reasons.
	static SuperCyberCrash_AINode_CombatPLC Create(double MaxDistance = 1024)
	{
		SuperCyberCrash_AINode_CombatPLC Result = New('SuperCyberCrash_AINode_CombatPLC');
		Result.MaxDistance = MaxDistance ** 2;
		return Result;
	}
	override double CalculateUtility(TCustomCyberActor CustomCyberActor)
	{
		if (CustomCyberActor.Distance2DSquared(CustomCyberActor.Target) <= MaxDistance)
			return 0.7;
		return 0;
	}
	override TStatus Update(TCustomCyberActor CustomCyberActor)
	{
		if (CustomCyberActor.IsInAttackState())
		{
			if (CustomCyberActor.WeaponCooldown == 0)
			{
				CustomCyberActor.A_StartSound("weapons/plc", CHAN_WEAPON);
				CustomCyberActor.B_Missile('PlasmaLaserCannonProjectile');
				CustomCyberActor.WeaponCooldown = 4;
			}
			return BH_RUNNING;
		}
		if (CustomCyberActor.CheckMissileRange())
		{
			CustomCyberActor.UpdateStateLabel("Missile", true);
			CustomCyberActor.WeaponCooldown = 2;
		}
		return BH_SUCCESS;
	}
}

// -----------------------------------------------------------------------------
// SuperCyberCrash.
// -----------------------------------------------------------------------------

class SuperCyberCrash : TCyberBasic abstract
{
	override void Initialize()
	{
		super.Initialize();
		A_GiveInventory('EnergyShield1', 1);
	}
	default
	{
		CameraHeight 42;
		Health 250;
		Height 56;
		Mass 250;
		PainChance 80;
		Radius 20;
		Speed 8;
		Tag "Super Cyber Crash";
		KAI_Actor.AggressionMultiplier 1.0;
		KAI_Actor.ThreatLevel THREAT_VERYDANGEROUS;
		KAI_Actor.ThreatLevelThreshold THREAT_VERYDANGEROUS;
		ActiveSound "CyberCrash/Active";
		DeathSound "CyberCrash/Death";
		PainSound "CyberCrash/Pain";
		SeeSound "CyberCrash/Sight";
	}
	states
	{
		Spawn:
			TNT1 A 0;
			goto Think;
		See:
			TNT1 A 0;
			goto Think;
		Pain:
			NJUM A 3 A_Pain();
			NJUM BCDEFGHIJKLMNOPQRST 1;
			goto Think;
		Death:
			TNT1 A 0 A_Jump(256, "Death.1", "Death.2", "Death.3");
			goto Think;
		Death.1:
			ND10 A 3 B_Die();
			ND10 BCDEFGHIJKLMNOPQRSTUVWXYZ 3;
			ND11 ABC 3;
			ND11 D -1;
			stop;
		Death.2:
			ND20 A 3 B_Die();
			ND20 BCDEFGHIJKLMNOPQ 3;
			ND20 R -1;
			stop;
		Death.3:
			ND30 A 3 B_Die();
			ND30 BCDEFGHIJKLMNOPQRSTU 3;
			ND30 V -1;
			stop;
		Raise:
			NDE2 E 3 Initialize();
			NDE2 DCBA 3;
			NDE1 ZYXWVUTSRQPONMLKJIHGFEDCBA 3;
			goto Think;
		Think:
			TNT1 A 0 B_Think();
			loop; // Never, it is safe!
		Idle:
			NIDL ABCDEFGHIJKLM 3;
			goto Think;
		IdleCrouch:
			NIDC ABCDEFGHIJKLMNOPQ 3;
			goto Think;
		Jump:
			NJUB A 3 B_JumpBegin();
			NJUB BCDEFGHIJKLMN 3;
			NJUB O 3 B_JumpEnd();
			goto Think;
		Run:
			NRUN ABCDEFGHIJ 3;
			goto Think;
		Swim:
			NSWI ABCDEFGHIJ 3;
			goto Think;
		Walk:
			NWAL ABCDEFGHIJKLMNOPQ 3;
			goto Think;
		WalkBack:
			NWAB ABCDEFGHIJ 3;
			goto Think;
		WalkCrouch:
			NWAC ABCDEFGHIJKLMNOP 3;
			goto Think;
	}
}

class SuperCyberCrashGreen : SuperCyberCrash
{
	override void Initialize()
	{
		super.Initialize();
		EnergyShield1 EnergyShield = EnergyShield1(FindInventory('EnergyShield1'));
		EnergyShield.A_ChangeModel('SuperCyberCrashGreen');
	}
	override void InitBehavior()
	{
		MeleeState = null;
		MissileState = FindState("Missile", true);
		AttackStates.Push(MissileState);
		TBehaviorTreeManager BehaviorTreeManager = TBehaviorTreeManager.GetInstance();
		Behavior = BehaviorTreeManager.GetBehavior(self.GetClass());
		if (!Behavior)
		{
			Behavior = TSequence.Create()
				.AddBehavior(TCyberBasic_AINode_TimeFreeze.Create())
				.AddBehavior(TCyberBasic_AINode_BasicLife.Create())
				.AddBehavior(
					TSelector.Create() // Strategy selector
						.AddBehavior(TCyberBasic_AINode_SearchHelp.Create())
						.AddBehavior(TCyberBasic_AINode_Goal.Create())
						.AddBehavior(TCyberBasic_AINode_Fight.Create())
						.AddBehavior(TCyberBasic_AINode_Gesture.Create())
						.AddBehavior(TCyberBasic_AINode_Rest.Create())
				)
				.AddBehavior(
					TSequence.Create()
					.AddBehavior(TCyberBasic_AINode_ChaseMode.Create(8, 16))
					.AddBehavior(
						TSelector.Create() // Tactical selector
							.AddBehavior(TCyberBasic_AINode_Jump.Create())
							.AddBehavior(TCyberBasic_AINode_CoverZone.Create())
							.AddBehavior(TCyberBasic_AINode_NextMove.Create())
					)
					.AddBehavior(TCyberBasic_AINode_Move.Create())
					.AddBehavior(TCyberBasic_AINode_CloackingDevice.Create())
				)
				.AddBehavior(
					TSequence.Create()
					.AddBehavior(TCyberBasic_AINode_BasicCombat.Create())
					.AddBehavior(TCyberBasic_AINode_CombatMissile.Create())
				)
			;
			BehaviorTreeManager.AddBehavior(self.GetClass(), Behavior);
		}
	}
	default
	{
		DropItem "Cell", 192;
		DropItem "CellPack", 32;
		DropItem "PlasmaGun", 32;
		DropItem "CyberArmor", 11;
		Tag "Super Cyber Crash Green";
	}
	states
	{
		Missile:
			NIDL A 0 A_Jump(32, "Think");
			NIDL A 7 A_FaceTarget();
			NIDL A 1 bright B_Missile('ArachnotronPlasma');
			NIDL A 0 bright A_MonsterRefire(0, "Think");
			goto Missile;
	}
}

class SuperCyberCrashRed : SuperCyberCrash
{
	override void Initialize()
	{
		super.Initialize();
		EnergyShield1 EnergyShield = EnergyShield1(FindInventory('EnergyShield1'));
		EnergyShield.A_ChangeModel('SuperCyberCrashRed');
	}
	override void InitBehavior()
	{
		MeleeState = null;
		MissileState = FindState("Missile", true);
		AttackStates.Push(MissileState);
		TBehaviorTreeManager BehaviorTreeManager = TBehaviorTreeManager.GetInstance();
		Behavior = BehaviorTreeManager.GetBehavior(self.GetClass());
		if (!Behavior)
		{
			Behavior = TSequence.Create()
				.AddBehavior(TCyberBasic_AINode_TimeFreeze.Create())
				.AddBehavior(TCyberBasic_AINode_BasicLife.Create())
				.AddBehavior(
					TSelector.Create() // Strategy selector
						.AddBehavior(TCyberBasic_AINode_SearchHelp.Create())
						.AddBehavior(TCyberBasic_AINode_Goal.Create())
						.AddBehavior(TCyberBasic_AINode_Fight.Create())
						.AddBehavior(TCyberBasic_AINode_Gesture.Create())
						.AddBehavior(TCyberBasic_AINode_Rest.Create())
				)
				.AddBehavior(
					TSequence.Create()
					.AddBehavior(TCyberBasic_AINode_ChaseMode.Create(8, 16))
					.AddBehavior(
						TSelector.Create() // Tactical selector
							.AddBehavior(TCyberBasic_AINode_Jump.Create())
							.AddBehavior(TCyberBasic_AINode_CoverZone.Create())
							.AddBehavior(TCyberBasic_AINode_NextMove.Create())
					)
					.AddBehavior(TCyberBasic_AINode_Move.Create())
					.AddBehavior(TCyberBasic_AINode_CloackingDevice.Create())
				)
				.AddBehavior(
					TSequence.Create()
					.AddBehavior(TCyberBasic_AINode_BasicCombat.Create())
					.AddBehavior(TCyberBasic_AINode_CombatMissile.Create())
				)
			;
			BehaviorTreeManager.AddBehavior(self.GetClass(), Behavior);
		}
	}
	default
	{
		DropItem "Cell", 192;
		DropItem "CellPack", 32;
		DropItem "PlasmaRifle", 32;
		DropItem "CyberArmor", 11;
		Tag "Super Cyber Crash Red";
	}
	states
	{
		Missile:
			NIDL A 0 A_Jump(32, "Think");
			NIDL A 2 A_FaceTarget();
			NIDL A 1 bright B_Missile('PlasmaBall');
			NIDL A 0 bright A_MonsterRefire(0, "Think");
			goto Missile;
	}
}

class SuperCyberCrashBlue : SuperCyberCrash
{
	override void Initialize()
	{
		super.Initialize();
		EnergyShield1 EnergyShield = EnergyShield1(FindInventory('EnergyShield1'));
		EnergyShield.A_ChangeModel('SuperCyberCrashBlue');
	}
	override void InitBehavior()
	{
		MeleeState = null;
		MissileState = FindState("Missile", true);
		AttackStates.Push(MissileState);
		TBehaviorTreeManager BehaviorTreeManager = TBehaviorTreeManager.GetInstance();
		Behavior = BehaviorTreeManager.GetBehavior(self.GetClass());
		if (!Behavior)
		{
			Behavior = TSequence.Create()
				.AddBehavior(TCyberBasic_AINode_TimeFreeze.Create())
				.AddBehavior(TCyberBasic_AINode_BasicLife.Create())
				.AddBehavior(
					TSelector.Create() // Strategy selector
						.AddBehavior(TCyberBasic_AINode_SearchHelp.Create())
						.AddBehavior(TCyberBasic_AINode_Goal.Create())
						.AddBehavior(TCyberBasic_AINode_Fight.Create())
						.AddBehavior(TCyberBasic_AINode_Gesture.Create())
						.AddBehavior(TCyberBasic_AINode_Rest.Create())
				)
				.AddBehavior(
					TSequence.Create()
					.AddBehavior(TCyberBasic_AINode_ChaseMode.Create(8, 16))
					.AddBehavior(
						TSelector.Create() // Tactical selector
							.AddBehavior(TCyberBasic_AINode_Jump.Create())
							.AddBehavior(TCyberBasic_AINode_CoverZone.Create())
							.AddBehavior(TCyberBasic_AINode_NextMove.Create())
					)
					.AddBehavior(TCyberBasic_AINode_Move.Create())
					.AddBehavior(TCyberBasic_AINode_CloackingDevice.Create())
				)
				.AddBehavior(
					TSequence.Create()
					.AddBehavior(TCyberBasic_AINode_BasicCombat.Create())
					.AddBehavior(TCyberBasic_AINode_CombatMissile.Create())
				)
			;
			BehaviorTreeManager.AddBehavior(self.GetClass(), Behavior);
		}
	}
	default
	{
		DropItem "Cell", 192;
		DropItem "CellPack", 32;
		DropItem "NFG", 32;
		DropItem "CyberArmor", 11;
		Tag "Super Cyber Crash Blue";
	}
	states
	{
		Missile:
			NIDL A 0 A_Jump(32, "Think");
			NIDL A 2 A_FaceTarget();
			NIDL A 1 bright B_Missile('NFGPlasmaBall');
			NIDL A 0 bright A_MonsterRefire(0, "Think");
			goto Missile;
	}
}

class SuperCyberCrashWhite: SuperCyberCrash
{
	override void Initialize()
	{
		super.Initialize();
		EnergyShield1 EnergyShield = EnergyShield1(FindInventory('EnergyShield1'));
		EnergyShield.A_ChangeModel('SuperCyberCrashWhite');
	}
	override void InitBehavior()
	{
		MeleeState = null;
		MissileState = FindState("Missile", true);
		AttackStates.Push(MissileState);
		TBehaviorTreeManager BehaviorTreeManager = TBehaviorTreeManager.GetInstance();
		Behavior = BehaviorTreeManager.GetBehavior(self.GetClass());
		if (!Behavior)
		{
			Behavior = TSequence.Create()
				.AddBehavior(TCyberBasic_AINode_TimeFreeze.Create())
				.AddBehavior(TCyberBasic_AINode_BasicLife.Create())
				.AddBehavior(
					TSelector.Create() // Strategy selector
						.AddBehavior(TCyberBasic_AINode_SearchHelp.Create())
						.AddBehavior(TCyberBasic_AINode_GiveAid.Create())
						.AddBehavior(TCyberBasic_AINode_Goal.Create())
						.AddBehavior(TCyberBasic_AINode_Fight.Create())
						.AddBehavior(TCyberBasic_AINode_Gesture.Create())
						.AddBehavior(TCyberBasic_AINode_Rest.Create())
				)
				.AddBehavior(
					TSequence.Create()
					.AddBehavior(TCyberBasic_AINode_ChaseMode.Create(8, 16))
					.AddBehavior(
						TSelector.Create() // Tactical selector
							.AddBehavior(TCyberBasic_AINode_Jump.Create())
							.AddBehavior(TCyberBasic_AINode_CoverZone.Create())
							.AddBehavior(TCyberBasic_AINode_NextMove.Create())
					)
					.AddBehavior(TCyberBasic_AINode_Move.Create())
					.AddBehavior(TCyberBasic_AINode_CloackingDevice.Create())
				)
				.AddBehavior(
					TSequence.Create()
					.AddBehavior(TCyberBasic_AINode_BasicCombat.Create())
					.AddBehavior(TCyberBasic_AINode_CombatMissile.Create())
				)
			;
			BehaviorTreeManager.AddBehavior(self.GetClass(), Behavior);
		}
	}
	default
	{
		DropItem "Clip", 192;
		DropItem "ClipBox", 32;
		DropItem "VanillaRifle", 32;
		DropItem "Berserk", 32;
		DropItem "CyberArmor", 11;
		Tag "Super Cyber Crash White (Medic)";
		+TCustomNavMeshActor.NavMeshMedic;
	}
	states
	{
		Missile:
			NIDL A 4 A_Jump(32, "Think");
			NIDL A 4 bright B_Missile("SM_Bullet");
			NIDL A 0 bright A_MonsterRefire(0, "Think");
			goto Missile;
	}
}

class SuperCyberCrashBlack: SuperCyberCrash
{
	override void Initialize()
	{
		super.Initialize();
		EnergyShield1 EnergyShield = EnergyShield1(FindInventory('EnergyShield1'));
		EnergyShield.A_ChangeModel('SuperCyberCrashBlack');
	}
	override void InitBehavior()
	{
		MeleeState = null;
		MissileState = FindState("Missile", true);
		AttackStates.Push(MissileState);
		TBehaviorTreeManager BehaviorTreeManager = TBehaviorTreeManager.GetInstance();
		Behavior = BehaviorTreeManager.GetBehavior(self.GetClass());
		if (!Behavior)
		{
			Behavior = TSequence.Create()
				.AddBehavior(TCyberBasic_AINode_TimeFreeze.Create())
				.AddBehavior(TCyberBasic_AINode_BasicLife.Create())
				.AddBehavior(
					TSelector.Create() // Strategy selector
						.AddBehavior(TCyberBasic_AINode_SearchHelp.Create())
						.AddBehavior(TCyberBasic_AINode_Goal.Create())
						.AddBehavior(TCyberBasic_AINode_Fight.Create())
						.AddBehavior(TCyberBasic_AINode_Gesture.Create())
						.AddBehavior(TCyberBasic_AINode_Rest.Create())
				)
				.AddBehavior(
					TSequence.Create()
					.AddBehavior(TCyberBasic_AINode_ChaseMode.Create(8, 16))
					.AddBehavior(
						TSelector.Create() // Tactical selector
							.AddBehavior(TCyberBasic_AINode_Jump.Create())
							.AddBehavior(TCyberBasic_AINode_CoverZone.Create())
							.AddBehavior(TCyberBasic_AINode_NextMove.Create())
					)
					.AddBehavior(TCyberBasic_AINode_Move.Create())
					.AddBehavior(TCyberBasic_AINode_CloackingDevice.Create())
				)
				.AddBehavior(
					TSequence.Create()
					.AddBehavior(TCyberBasic_AINode_BasicCombat.Create())
					.AddBehavior(
						TUtilitySelector.Create()
							.AddBehavior(SuperCyberCrash_AINode_CombatPLC.Create())
							.AddBehavior(SuperCyberCrash_AINode_CombatSTD.Create())
					)
				)
			;
			BehaviorTreeManager.AddBehavior(self.GetClass(), Behavior);
		}
	}
	default
	{
		DropItem "Clip", 192;
		DropItem "ClipBox", 32;
		DropItem "VanillaRifle", 32;
		DropItem "CyberBattery", 192;
		DropItem "CyberBatteryPack", 32;
		DropItem "PlasmaLaserCannon", 32;
		DropItem "CyberArmor", 11;
		Tag "Super Cyber Crash Black";
	}
	states
	{
		Missile:
			NIDL A 2 A_Jump(16, "Think");
			NIDL A 2 bright;
			NIDL A 0 bright A_MonsterRefire(0, "Think");
			goto Missile;
	}
}
