//==============================================================================
//
// Cyber Doom.
//
//==============================================================================

// -----------------------------------------------------------------------------
// AI nodes.
// -----------------------------------------------------------------------------

// Root node of the behavior tree.
class CyberDoom_AINode_Root : TSequence
{
	static CyberDoom_AINode_Root Create()
	{
		CyberDoom_AINode_Root Result = New('CyberDoom_AINode_Root');
		return Result;
	}
	override TStatus Update(TCustomCyberActor CustomCyberActor)
	{
		if (CustomCyberActor.Health <= 0)
		{
			if (CustomCyberActor.ResuscitationTimer)
				CustomCyberActor.ResuscitationTimer--;
			return BH_FAILURE;
		}
		return super.Update(CustomCyberActor);
	}
}

// -----------------------------------------------------------------------------
// CyberDoom.
// -----------------------------------------------------------------------------

class CyberDoom : TCyberBasic abstract
{
	override void Initialize()
	{
		super.Initialize();
		A_GiveInventory('EnergyShield1', 1);
	}
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		MissileState = FindState("Missile", true);
		AttackStates.Push(MissileState);
	}
	void B_Missile(Class<Actor> ProjectileClass)
	{
		A_FaceTarget();
		AimAtTarget();
		A_SpawnProjectile(ProjectileClass);
	}
	default
	{
		CameraHeight 42;
		Health 100;
		Height 56;
		Mass 100;
		PainChance 30;
		Radius 20;
		Speed 16;
		Tag "Cyber Doom";
		KAI_Actor.AggressionMultiplier 1.0;
		KAI_Actor.ThreatLevel THREAT_ABOVENORMAL;
		KAI_Actor.ThreatLevelThreshold THREAT_DANGEROUS;
		ActiveSound "CyberDoom/Active";
		AttackSound "CyberDoom/Attack";
		DeathSound "CyberDoom/Death";
		PainSound "CyberDoom/Pain";
		SeeSound "CyberDoom/Sight";
		+AvoidMelee;
	}
}

class CyberDoomGreen : CyberDoom
{
	override void InitBehavior()
	{
		TBehaviorTreeManager BehaviorTreeManager = TBehaviorTreeManager.GetInstance();
		Behavior = BehaviorTreeManager.GetBehavior(self.GetClass());
		if (!Behavior)
		{
			Behavior = CyberDoom_AINode_Root.Create();
			CyberDoom_AINode_Root Result = CyberDoom_AINode_Root(Behavior);
			Result.AddBehavior(TCyberBasic_AINode_SeekHelp.Create(HealthScore: 20));
			Result.AddBehavior(TCyberBasic_AINode_SeekIncoming.Create());
			Result.AddBehavior(TCyberBasic_AINode_SeekGoal.Create());
			Result.AddBehavior(TCyberBasic_AINode_Chase.Create(ChaseDistance: 384, RunSpeed: 16, WalkSpeed: 8));
			Result.AddBehavior(TCyberBasic_AINode_Fight.Create());
			BehaviorTreeManager.AddBehavior(self.GetClass(), Result);
		}
	}
	default
	{
		Tag "Cyber Doom Green";
	}
	states
	{
		Spawn:
			TNT1 A 0;
			goto Think;
		See:
			TNT1 A 0;
			goto Think;
		Missile:
			PLAY E 0 A_Jump(32, "Think");
			PLAY E 7 A_FaceTarget();
			PLAY F 1 bright B_Missile('ArachnotronPlasma');
			PLAY F 0 bright A_MonsterRefire(0, "Think");
			goto Missile;
		Pain:
			TNT1 A 0 A_Pain();
			goto Think;
		Death:
			PLAY H 10 B_Die();
			PLAY IJKLM 10;
			PLAY N -1;
			stop;
		XDeath:
			PLAY O 5 B_Die();
			PLAY PQRSTUV 5;
			PLAY W -1;
			stop;
		Raise:
			PLAY N 10 Initialize();
			PLAY MKJIH 10;
			goto Think;
		Think:
			TNT1 A 0 B_Think();
			loop; // Never, it is safe!
		Idle:
			PLAY AB 10;
			goto Think;
		Run:
			PLAY ABCD 2;
			goto Think;
		Walk:
			PLAY ABCD 4;
			goto Think;
	}
}

class CyberDoomRed : CyberDoom
{
	override void InitBehavior()
	{
		TBehaviorTreeManager BehaviorTreeManager = TBehaviorTreeManager.GetInstance();
		Behavior = BehaviorTreeManager.GetBehavior(self.GetClass());
		if (!Behavior)
		{
			Behavior = CyberDoom_AINode_Root.Create();
			CyberDoom_AINode_Root Result = CyberDoom_AINode_Root(Behavior);
			Result.AddBehavior(TCyberBasic_AINode_SeekHelp.Create(HealthScore: 20));
			Result.AddBehavior(TCyberBasic_AINode_SeekIncoming.Create());
			Result.AddBehavior(TCyberBasic_AINode_SeekGoal.Create());
			Result.AddBehavior(TCyberBasic_AINode_Chase.Create(ChaseDistance: 384, RunSpeed: 16, WalkSpeed: 8));
			Result.AddBehavior(TCyberBasic_AINode_Fight.Create());
			BehaviorTreeManager.AddBehavior(self.GetClass(), Result);
		}
	}
	default
	{
		Tag "Cyber Doom Red";
		Translation "Marine_Red";
	}
	states
	{
		Spawn:
			TNT1 A 0;
			goto Think;
		See:
			TNT1 A 0;
			goto Think;
		Missile:
			PLAY E 0 A_Jump(32, "Think");
			PLAY E 2 A_FaceTarget();
			PLAY F 1 bright B_Missile('PlasmaBall');
			PLAY F 0 bright A_MonsterRefire(0, "Think");
			goto Missile;
		Pain:
			TNT1 A 0 A_Pain();
			goto Think;
		Death:
			PLAY H 10 B_Die();
			PLAY IJKLM 10;
			PLAY N -1;
			stop;
		XDeath:
			PLAY O 5 B_Die();
			PLAY PQRSTUV 5;
			PLAY W -1;
			stop;
		Raise:
			PLAY N 10 Initialize();
			PLAY MKJIH 10;
			goto Think;
		Think:
			TNT1 A 0 B_Think();
			loop; // Never, it is safe!
		Idle:
			PLAY AB 10;
			goto Think;
		Run:
			PLAY ABCD 2;
			goto Think;
		Walk:
			PLAY ABCD 4;
			goto Think;
	}
}

class CyberDoomBlue : CyberDoom
{
	override void InitBehavior()
	{
		TBehaviorTreeManager BehaviorTreeManager = TBehaviorTreeManager.GetInstance();
		Behavior = BehaviorTreeManager.GetBehavior(self.GetClass());
		if (!Behavior)
		{
			Behavior = CyberDoom_AINode_Root.Create();
			CyberDoom_AINode_Root Result = CyberDoom_AINode_Root(Behavior);
			Result.AddBehavior(TCyberBasic_AINode_SeekHelp.Create(HealthScore: 20));
			Result.AddBehavior(TCyberBasic_AINode_SeekIncoming.Create());
			Result.AddBehavior(TCyberBasic_AINode_SeekGoal.Create());
			Result.AddBehavior(TCyberBasic_AINode_Chase.Create(ChaseDistance: 384, RunSpeed: 16, WalkSpeed: 8));
			Result.AddBehavior(TCyberBasic_AINode_Fight.Create());
			BehaviorTreeManager.AddBehavior(self.GetClass(), Result);
		}
	}
	default
	{
		Tag "Cyber Doom Blue";
		Translation "Marine_Blue";
	}
	states
	{
		Spawn:
			TNT1 A 0;
			goto Think;
		See:
			TNT1 A 0;
			goto Think;
		Missile:
			PLAY E 0 A_Jump(32, "Think");
			PLAY E 2 A_FaceTarget();
			PLAY F 1 bright B_Missile('NFGPlasmaBall');
			PLAY F 0 bright A_MonsterRefire(0, "Think");
			goto Missile;
		Pain:
			TNT1 A 0 A_Pain();
			goto Think;
		Death:
			PLAY H 10 B_Die();
			PLAY IJKLM 10;
			PLAY N -1;
			stop;
		XDeath:
			PLAY O 5 B_Die();
			PLAY PQRSTUV 5;
			PLAY W -1;
			stop;
		Raise:
			PLAY N 10 Initialize();
			PLAY MKJIH 10;
			goto Think;
		Think:
			TNT1 A 0 B_Think();
			loop; // Never, it is safe!
		Idle:
			PLAY AB 10;
			goto Think;
		Run:
			PLAY ABCD 2;
			goto Think;
		Walk:
			PLAY ABCD 4;
			goto Think;
	}
}

class CyberDoomGray : CyberDoom
{
	override void InitBehavior()
	{
		TBehaviorTreeManager BehaviorTreeManager = TBehaviorTreeManager.GetInstance();
		Behavior = BehaviorTreeManager.GetBehavior(self.GetClass());
		if (!Behavior)
		{
			Behavior = CyberDoom_AINode_Root.Create();
			CyberDoom_AINode_Root Result = CyberDoom_AINode_Root(Behavior);
			Result.AddBehavior(TCyberBasic_AINode_SeekHelp.Create(HealthScore: 20));
			Result.AddBehavior(TCyberBasic_AINode_SeekIncoming.Create());
			Result.AddBehavior(TCyberBasic_AINode_RepairVehicles.Create());
			Result.AddBehavior(TCyberBasic_AINode_SeekGoal.Create());
			Result.AddBehavior(TCyberBasic_AINode_Chase.Create(ChaseDistance: 384, RunSpeed: 16, WalkSpeed: 8));
			TSequence AttackSequence = New('TSequence');
			AttackSequence.AddBehavior(TCyberBasic_AINode_SafeHitscan.Create());
			AttackSequence.AddBehavior(TCyberBasic_AINode_Fight.Create());
			Result.AddBehavior(AttackSequence);
			BehaviorTreeManager.AddBehavior(self.GetClass(), Result);
		}
	}
	default
	{
		Tag "Cyber Doom Gray";
		Translation "Marine_Gray";
	}
	states
	{
		Spawn:
			TNT1 A 0;
			goto Think;
		See:
			TNT1 A 0;
			goto Think;
		Missile:
			PLAY E 4 A_Jump(32, "Think");
			PLAY F 4 bright B_Missile("SM_Bullet");
			PLAY F 0 bright A_MonsterRefire(0, "Think");
			goto Missile;
		Pain:
			TNT1 A 0 A_Pain();
			goto Think;
		Death:
			PLAY H 10 B_Die();
			PLAY IJKLM 10;
			PLAY N -1;
			stop;
		XDeath:
			PLAY O 5 B_Die();
			PLAY PQRSTUV 5;
			PLAY W -1;
			stop;
		Raise:
			PLAY N 10 Initialize();
			PLAY MKJIH 10;
			goto Think;
		Think:
			TNT1 A 0 B_Think();
			loop; // Never, it is safe!
		Idle:
			PLAY AB 10;
			goto Think;
		RepairVehicle:
			PLAY AB 5;
			goto Think;
		Run:
			PLAY ABCD 2;
			goto Think;
		Walk:
			PLAY ABCD 4;
			goto Think;
	}
}

class CyberDoomWhite : CyberDoom
{
	override void InitBehavior()
	{
		TBehaviorTreeManager BehaviorTreeManager = TBehaviorTreeManager.GetInstance();
		Behavior = BehaviorTreeManager.GetBehavior(self.GetClass());
		if (!Behavior)
		{
			Behavior = CyberDoom_AINode_Root.Create();
			CyberDoom_AINode_Root Result = CyberDoom_AINode_Root(Behavior);
			Result.AddBehavior(TCyberBasic_AINode_SeekHelp.Create(HealthScore: 20));
			Result.AddBehavior(TCyberBasic_AINode_SeekIncoming.Create());
			Result.AddBehavior(TCyberBasic_AINode_GiveAid.Create());
			Result.AddBehavior(TCyberBasic_AINode_SeekGoal.Create());
			Result.AddBehavior(TCyberBasic_AINode_Chase.Create(ChaseDistance: 384, RunSpeed: 16, WalkSpeed: 8));
			TSequence AttackSequence = New('TSequence');
			AttackSequence.AddBehavior(TCyberBasic_AINode_SafeHitscan.Create());
			AttackSequence.AddBehavior(TCyberBasic_AINode_Fight.Create());
			Result.AddBehavior(AttackSequence);
			BehaviorTreeManager.AddBehavior(self.GetClass(), Result);
		}
	}
	default
	{
		Tag "Cyber Doom White (Medic)";
		Translation "Marine_White";
		+TCustomNavMeshActor.NavMeshMedic;
	}
	states
	{
		Spawn:
			TNT1 A 0;
			goto Think;
		See:
			TNT1 A 0;
			goto Think;
		Missile:
			PLAY E 4 A_Jump(32, "Think");
			PLAY F 4 bright B_Missile("SM_Bullet");
			PLAY F 0 bright A_MonsterRefire(0, "Think");
			goto Missile;
		Pain:
			TNT1 A 0 A_Pain();
			goto Think;
		Death:
			PLAY H 10 B_Die();
			PLAY IJKLM 10;
			PLAY N -1;
			stop;
		XDeath:
			PLAY O 5 B_Die();
			PLAY PQRSTUV 5;
			PLAY W -1;
			stop;
		Raise:
			PLAY N 10 Initialize();
			PLAY MKJIH 10;
			goto Think;
		Think:
			TNT1 A 0 B_Think();
			loop; // Never, it is safe!
		Help:
			PLAY AB 10;
			goto Think;
		Idle:
			PLAY AB 10;
			goto Think;
		Run:
			PLAY ABCD 2;
			goto Think;
		Walk:
			PLAY ABCD 4;
			goto Think;
	}
}

class CyberDoomBlack : CyberDoom
{
	override void InitBehavior()
	{
		TBehaviorTreeManager BehaviorTreeManager = TBehaviorTreeManager.GetInstance();
		Behavior = BehaviorTreeManager.GetBehavior(self.GetClass());
		if (!Behavior)
		{
			Behavior = CyberDoom_AINode_Root.Create();
			CyberDoom_AINode_Root Result = CyberDoom_AINode_Root(Behavior);
			Result.AddBehavior(TCyberBasic_AINode_SeekHelp.Create(HealthScore: 20));
			Result.AddBehavior(TCyberBasic_AINode_SeekIncoming.Create());
			Result.AddBehavior(TCyberBasic_AINode_SeekGoal.Create());
			Result.AddBehavior(TCyberBasic_AINode_Chase.Create(ChaseDistance: 384, RunSpeed: 16, WalkSpeed: 8));
			TSequence AttackSequence = New('TSequence');
			AttackSequence.AddBehavior(TCyberBasic_AINode_SafeHitscan.Create());
			AttackSequence.AddBehavior(TCyberBasic_AINode_Fight.Create());
			Result.AddBehavior(AttackSequence);
			BehaviorTreeManager.AddBehavior(self.GetClass(), Result);
		}
	}
	default
	{
		Tag "Cyber Doom Black";
		Translation "Marine_Black";
	}
	states
	{
		Spawn:
			TNT1 A 0;
			goto Think;
		See:
			TNT1 A 0;
			goto Think;
		Missile:
			PLAY E 2 A_Jump(16, "Think");
			PLAY F 2 bright B_CyberRifleAttack();
			PLAY F 0 bright A_MonsterRefire(0, "Think");
			goto Missile;
		Pain:
			TNT1 A 0 A_Pain();
			goto Think;
		Death:
			PLAY H 10 B_Die();
			PLAY IJKLM 10;
			PLAY N -1;
			stop;
		XDeath:
			PLAY O 5 B_Die();
			PLAY PQRSTUV 5;
			PLAY W -1;
			stop;
		Raise:
			PLAY N 10 Initialize();
			PLAY MKJIH 10;
			goto Think;
		Think:
			TNT1 A 0 B_Think();
			loop; // Never, it is safe!
		Idle:
			PLAY AB 10;
			goto Think;
		Run:
			PLAY ABCD 2;
			goto Think;
		Walk:
			PLAY ABCD 4;
			goto Think;
	}
}
